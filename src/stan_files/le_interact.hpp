/*
    alphaepi is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    alphaepi is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with alphaepi.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_le_interact_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_le_interact");
    reader.add_event(1, 1, "include", "/chunks/le_functions.stan");
    reader.add_event(1, 0, "start", "/chunks/le_functions.stan");
    reader.add_event(601, 600, "end", "/chunks/le_functions.stan");
    reader.add_event(601, 2, "restart", "model_le_interact");
    reader.add_event(603, 4, "include", "/chunks/le_data.stan");
    reader.add_event(603, 0, "start", "/chunks/le_data.stan");
    reader.add_event(698, 95, "end", "/chunks/le_data.stan");
    reader.add_event(698, 5, "restart", "model_le_interact");
    reader.add_event(787, 94, "include", "/chunks/le_likelihood.stan");
    reader.add_event(787, 0, "start", "/chunks/le_likelihood.stan");
    reader.add_event(844, 57, "end", "/chunks/le_likelihood.stan");
    reader.add_event(844, 95, "restart", "model_le_interact");
    reader.add_event(845, 96, "end", "model_le_interact");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
log_inv_logit_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("val", "rows(x)", rows(x));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  val(static_cast<Eigen::VectorXd::Index>(rows(x)));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 6;
        for (int i = 1; i <= rows(x); ++i) {
            current_statement_begin__ = 7;
            stan::math::assign(get_base1_lhs(val,i,"val",1), log_inv_logit(get_base1(x,i,"x",1)));
        }
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_inv_logit_vec_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
        return log_inv_logit_vec(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
inv_logit_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 14;
        validate_non_negative_index("val", "rows(x)", rows(x));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  val(static_cast<Eigen::VectorXd::Index>(rows(x)));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 16;
        for (int i = 1; i <= rows(x); ++i) {
            current_statement_begin__ = 17;
            stan::math::assign(get_base1_lhs(val,i,"val",1), inv_logit(get_base1(x,i,"x",1)));
        }
        current_statement_begin__ = 19;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct inv_logit_vec_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
        return inv_logit_vec(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
diagCumSum(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 24;
        validate_non_negative_index("val", "(rows(x) + 1)", (rows(x) + 1));
        validate_non_negative_index("val", "(cols(x) + 1)", (cols(x) + 1));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  val(static_cast<Eigen::VectorXd::Index>((rows(x) + 1)),static_cast<Eigen::VectorXd::Index>((cols(x) + 1)));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 26;
        for (int i = 1; i <= rows(val); ++i) {
            current_statement_begin__ = 27;
            stan::math::assign(get_base1_lhs(val,i,1,"val",1), 0);
        }
        current_statement_begin__ = 28;
        for (int j = 2; j <= cols(val); ++j) {

            current_statement_begin__ = 29;
            stan::math::assign(get_base1_lhs(val,1,j,"val",1), 0);
            current_statement_begin__ = 30;
            for (int i = 2; i <= rows(val); ++i) {
                current_statement_begin__ = 31;
                stan::math::assign(get_base1_lhs(val,i,j,"val",1), (get_base1(val,(i - 1),(j - 1),"val",1) + get_base1(x,(i - 1),(j - 1),"x",1)));
            }
        }
        current_statement_begin__ = 34;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct diagCumSum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& x, std::ostream* pstream__) const {
        return diagCumSum(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1,Eigen::Dynamic>
col_means(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 38;
        validate_non_negative_index("val", "cols(X)", cols(X));
        Eigen::Matrix<fun_scalar_t__,1,Eigen::Dynamic>  val(static_cast<Eigen::VectorXd::Index>(cols(X)));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 39;
        stan::math::assign(val, multiply(rep_row_vector((1.0 / rows(X)),rows(X)),X));
        current_statement_begin__ = 40;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct col_means_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X, std::ostream* pstream__) const {
        return col_means(X, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
row_means(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 44;
        validate_non_negative_index("val", "rows(X)", rows(X));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  val(static_cast<Eigen::VectorXd::Index>(rows(X)));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 45;
        stan::math::assign(val, multiply(X,rep_vector((1.0 / cols(X)),cols(X))));
        current_statement_begin__ = 46;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct row_means_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X, std::ostream* pstream__) const {
        return row_means(X, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_hazard(const T0__& y,
                   const T1__& alpha,
                   const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 50;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((alpha / sigma) * pow((y / sigma),(alpha - 1))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct weibull_hazard_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& y,
                   const T1__& alpha,
                   const T2__& sigma, std::ostream* pstream__) const {
        return weibull_hazard(y, alpha, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
create_hivmx_dur_a0(const T0__& shape,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& scale_a0,
                        const int& steps_dur,
                        const T3__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 60;
        validate_non_negative_index("y", "steps_dur", steps_dur);
        validate_non_negative_index("y", "rows(scale_a0)", rows(scale_a0));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  y(static_cast<Eigen::VectorXd::Index>(steps_dur),static_cast<Eigen::VectorXd::Index>(rows(scale_a0)));
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(y,DUMMY_VAR__);


        current_statement_begin__ = 61;
        for (int j = 1; j <= rows(scale_a0); ++j) {

            current_statement_begin__ = 62;
            for (int i = 1; i <= steps_dur; ++i) {
                current_statement_begin__ = 63;
                stan::math::assign(get_base1_lhs(y,i,j,"y",1), weibull_hazard(((i * dt) - (dt / 2)),shape,get_base1(scale_a0,j,"scale_a0",1), pstream__));
            }
        }
        current_statement_begin__ = 65;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct create_hivmx_dur_a0_functor__ {
    template <typename T0__, typename T1__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const T0__& shape,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& scale_a0,
                        const int& steps_dur,
                        const T3__& dt, std::ostream* pstream__) const {
        return create_hivmx_dur_a0(shape, scale_a0, steps_dur, dt, pstream__);
    }
};

template <typename T0__, typename T1__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
create_log_hivsurv_dur_a0(const T0__& shape,
                              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& scale_a0,
                              const int& steps_dur,
                              const T3__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 69;
        validate_non_negative_index("y", "steps_dur", steps_dur);
        validate_non_negative_index("y", "rows(scale_a0)", rows(scale_a0));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  y(static_cast<Eigen::VectorXd::Index>(steps_dur),static_cast<Eigen::VectorXd::Index>(rows(scale_a0)));
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(y,DUMMY_VAR__);


        current_statement_begin__ = 70;
        for (int j = 1; j <= rows(scale_a0); ++j) {

            current_statement_begin__ = 71;
            for (int i = 1; i <= steps_dur; ++i) {
                current_statement_begin__ = 72;
                stan::math::assign(get_base1_lhs(y,i,j,"y",1), weibull_ccdf_log(((i * dt) - (dt / 2)),shape,get_base1(scale_a0,j,"scale_a0",1)));
            }
        }
        current_statement_begin__ = 74;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct create_log_hivsurv_dur_a0_functor__ {
    template <typename T0__, typename T1__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const T0__& shape,
                              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& scale_a0,
                              const int& steps_dur,
                              const T3__& dt, std::ostream* pstream__) const {
        return create_log_hivsurv_dur_a0(shape, scale_a0, steps_dur, dt, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
diff_hivmxMID_dur_a0(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& x,
                         const T1__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 78;
        validate_non_negative_index("y", "rows(x)", rows(x));
        validate_non_negative_index("y", "cols(x)", cols(x));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  y(static_cast<Eigen::VectorXd::Index>(rows(x)),static_cast<Eigen::VectorXd::Index>(cols(x)));
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(y,DUMMY_VAR__);


        current_statement_begin__ = 79;
        stan::model::assign(y, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                    stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"), 
                    "assigning variable y");
        current_statement_begin__ = 80;
        for (int j = 1; j <= cols(x); ++j) {
            current_statement_begin__ = 81;
            for (int i = 2; i <= rows(x); ++i) {
                current_statement_begin__ = 82;
                stan::math::assign(get_base1_lhs(y,i,j,"y",1), (get_base1(x,i,j,"x",1) - get_base1(x,(i - 1),j,"x",1)));
            }
        }
        current_statement_begin__ = 83;
        stan::math::assign(y, divide(minus(y),dt));
        current_statement_begin__ = 84;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct diff_hivmxMID_dur_a0_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& x,
                         const T1__& dt, std::ostream* pstream__) const {
        return diff_hivmxMID_dur_a0(x, dt, pstream__);
    }
};

template <typename T4__, typename T5__, typename T6__, typename T8__>
Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__, T6__, T8__>::type, Eigen::Dynamic,1>
calc_phivsurv(const int& tIDX,
                  const int& aIDX,
                  const int& exposeDUR,
                  const int& exit_tIDX,
                  const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                  const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                  const Eigen::Matrix<T6__, Eigen::Dynamic,1>& artrr_MID,
                  const int& artstart_tIDX,
                  const T8__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T4__, T5__, T6__, T8__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 94;
        validate_non_negative_index("phivsurv", "exposeDUR", exposeDUR);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  phivsurv(static_cast<Eigen::VectorXd::Index>(exposeDUR));
        (void) phivsurv;  // dummy to suppress unused var warning

        stan::math::initialize(phivsurv, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(phivsurv,DUMMY_VAR__);


        current_statement_begin__ = 96;
        if (as_bool(logical_gt(exit_tIDX,artstart_tIDX))) {
            {
            current_statement_begin__ = 98;
            int i_tIDX(0);
            (void) i_tIDX;  // dummy to suppress unused var warning

            stan::math::fill(i_tIDX, std::numeric_limits<int>::min());
            current_statement_begin__ = 99;
            int i_aIDX(0);
            (void) i_aIDX;  // dummy to suppress unused var warning

            stan::math::fill(i_aIDX, std::numeric_limits<int>::min());


            current_statement_begin__ = 101;
            for (int ii = 1; ii <= exposeDUR; ++ii) {

                current_statement_begin__ = 102;
                stan::math::assign(i_tIDX, ((tIDX + ii) - 1));
                current_statement_begin__ = 103;
                stan::math::assign(i_aIDX, ((aIDX + ii) - 1));
                current_statement_begin__ = 105;
                if (as_bool(logical_lt(i_tIDX,artstart_tIDX))) {
                    current_statement_begin__ = 106;
                    stan::math::assign(get_base1_lhs(phivsurv,ii,"phivsurv",1), (get_base1(hivsurv_dur_a0,(artstart_tIDX - i_tIDX),i_aIDX,"hivsurv_dur_a0",1) * exp((-(dt) * dot_product(sub_col(hivmxMID_dur_a0,((artstart_tIDX - i_tIDX) + 1),i_aIDX,(exit_tIDX - artstart_tIDX)),segment(artrr_MID,artstart_tIDX,(exit_tIDX - artstart_tIDX)))))));
                } else {
                    current_statement_begin__ = 110;
                    stan::math::assign(get_base1_lhs(phivsurv,ii,"phivsurv",1), exp((-(dt) * dot_product(sub_col(hivmxMID_dur_a0,1,i_aIDX,(exit_tIDX - i_tIDX)),segment(artrr_MID,i_tIDX,(exit_tIDX - i_tIDX))))));
                }
            }
            }
        } else {
            {
            current_statement_begin__ = 113;
            int taoIDX(0);
            (void) taoIDX;  // dummy to suppress unused var warning

            stan::math::fill(taoIDX, std::numeric_limits<int>::min());


            current_statement_begin__ = 114;
            stan::math::assign(taoIDX, ((exit_tIDX - tIDX) + 1));
            current_statement_begin__ = 115;
            for (int ii = 1; ii <= exposeDUR; ++ii) {
                current_statement_begin__ = 116;
                stan::math::assign(get_base1_lhs(phivsurv,ii,"phivsurv",1), get_base1(hivsurv_dur_a0,(taoIDX - ii),((aIDX + ii) - 1),"hivsurv_dur_a0",1));
            }
            }
        }
        current_statement_begin__ = 119;
        return stan::math::promote_scalar<fun_return_scalar_t__>(phivsurv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_phivsurv_functor__ {
    template <typename T4__, typename T5__, typename T6__, typename T8__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__, T6__, T8__>::type, Eigen::Dynamic,1>
    operator()(const int& tIDX,
                  const int& aIDX,
                  const int& exposeDUR,
                  const int& exit_tIDX,
                  const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                  const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                  const Eigen::Matrix<T6__, Eigen::Dynamic,1>& artrr_MID,
                  const int& artstart_tIDX,
                  const T8__& dt, std::ostream* pstream__) const {
        return calc_phivsurv(tIDX, aIDX, exposeDUR, exit_tIDX, hivsurv_dur_a0, hivmxMID_dur_a0, artrr_MID, artstart_tIDX, dt, pstream__);
    }
};

template <typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__>::type, Eigen::Dynamic,1>
calc_hivmx(const int& tIDX,
               const int& aIDX,
               const int& exposeDUR,
               const int& exit_tIDX,
               const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
               const Eigen::Matrix<T5__, Eigen::Dynamic,1>& artrr,
               const int& artstart_tIDX, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T4__, T5__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 124;
        int taoIDX(0);
        (void) taoIDX;  // dummy to suppress unused var warning

        stan::math::fill(taoIDX, std::numeric_limits<int>::min());
        current_statement_begin__ = 125;
        validate_non_negative_index("hivmx", "exposeDUR", exposeDUR);
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  hivmx(static_cast<Eigen::VectorXd::Index>(exposeDUR));
        (void) hivmx;  // dummy to suppress unused var warning

        stan::math::initialize(hivmx, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(hivmx,DUMMY_VAR__);


        current_statement_begin__ = 127;
        stan::math::assign(taoIDX, ((exit_tIDX - tIDX) + 1));
        current_statement_begin__ = 129;
        for (int ii = 1; ii <= exposeDUR; ++ii) {
            current_statement_begin__ = 130;
            stan::math::assign(get_base1_lhs(hivmx,ii,"hivmx",1), get_base1(hivmx_dur_a0,(taoIDX - ii),((aIDX + ii) - 1),"hivmx_dur_a0",1));
        }
        current_statement_begin__ = 132;
        if (as_bool(logical_gt(exit_tIDX,artstart_tIDX))) {
            current_statement_begin__ = 133;
            stan::math::assign(hivmx, multiply(hivmx,get_base1(artrr,exit_tIDX,"artrr",1)));
        }
        current_statement_begin__ = 135;
        return stan::math::promote_scalar<fun_return_scalar_t__>(hivmx);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_hivmx_functor__ {
    template <typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__>::type, Eigen::Dynamic,1>
    operator()(const int& tIDX,
               const int& aIDX,
               const int& exposeDUR,
               const int& exit_tIDX,
               const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
               const Eigen::Matrix<T5__, Eigen::Dynamic,1>& artrr,
               const int& artstart_tIDX, std::ostream* pstream__) const {
        return calc_hivmx(tIDX, aIDX, exposeDUR, exit_tIDX, hivmx_dur_a0, artrr, artstart_tIDX, pstream__);
    }
};

template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T9__, typename T10__>
typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T9__, T10__>::type>::type
calc_log_psurventry(const int& entry_tIDX,
                        const int& entry_aIDX,
                        const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                        const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                        const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                        const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                        const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                        const Eigen::Matrix<T7__, Eigen::Dynamic,1>& artrr_MID,
                        const int& artstart_tIDX,
                        const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                        const T10__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T9__, T10__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 152;
        fun_scalar_t__ log_psurventry;
        (void) log_psurventry;  // dummy to suppress unused var warning

        stan::math::initialize(log_psurventry, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_psurventry,DUMMY_VAR__);
        current_statement_begin__ = 153;
        int expose_DUR(0);
        (void) expose_DUR;  // dummy to suppress unused var warning

        stan::math::fill(expose_DUR, std::numeric_limits<int>::min());
        current_statement_begin__ = 154;
        int expose_tIDX(0);
        (void) expose_tIDX;  // dummy to suppress unused var warning

        stan::math::fill(expose_tIDX, std::numeric_limits<int>::min());
        current_statement_begin__ = 155;
        int expose_aIDX(0);
        (void) expose_aIDX;  // dummy to suppress unused var warning

        stan::math::fill(expose_aIDX, std::numeric_limits<int>::min());


        current_statement_begin__ = 157;
        stan::math::assign(expose_DUR, (std::min(entry_tIDX,entry_aIDX) - 1));
        current_statement_begin__ = 158;
        stan::math::assign(expose_tIDX, (entry_tIDX - expose_DUR));
        current_statement_begin__ = 159;
        stan::math::assign(expose_aIDX, (entry_aIDX - expose_DUR));
        current_statement_begin__ = 161;
        if (as_bool(logical_gt(expose_DUR,0))) {
            {
            current_statement_begin__ = 162;
            validate_non_negative_index("phivsurv", "expose_DUR", expose_DUR);
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  phivsurv(static_cast<Eigen::VectorXd::Index>(expose_DUR));
            (void) phivsurv;  // dummy to suppress unused var warning

            stan::math::initialize(phivsurv, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(phivsurv,DUMMY_VAR__);
            current_statement_begin__ = 163;
            validate_non_negative_index("log_psurventry_i", "expose_DUR", expose_DUR);
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  log_psurventry_i(static_cast<Eigen::VectorXd::Index>(expose_DUR));
            (void) log_psurventry_i;  // dummy to suppress unused var warning

            stan::math::initialize(log_psurventry_i, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(log_psurventry_i,DUMMY_VAR__);


            current_statement_begin__ = 165;
            stan::math::assign(phivsurv, calc_phivsurv(expose_tIDX,expose_aIDX,expose_DUR,entry_tIDX,hivsurv_dur_a0,hivmxMID_dur_a0,artrr_MID,artstart_tIDX,dt, pstream__));
            current_statement_begin__ = 167;
            for (int ii = 1; ii <= expose_DUR; ++ii) {
                current_statement_begin__ = 168;
                stan::math::assign(get_base1_lhs(log_psurventry_i,ii,"log_psurventry_i",1), ((get_base1(cumavoidMID_time_age,((expose_tIDX + ii) - 1),((expose_aIDX + ii) - 1),"cumavoidMID_time_age",1) * get_base1(incrateMID_time_age,((expose_tIDX + ii) - 1),((expose_aIDX + ii) - 1),"incrateMID_time_age",1)) * get_base1(phivsurv,ii,"phivsurv",1)));
            }
            current_statement_begin__ = 172;
            stan::math::assign(log_psurventry, log((((dt * sum(log_psurventry_i)) + get_base1(cumavoid_time_age,entry_tIDX,entry_aIDX,"cumavoid_time_age",1)) * get_base1(natsurv_time_age,entry_tIDX,entry_aIDX,"natsurv_time_age",1))));
            }
        } else {
            current_statement_begin__ = 174;
            stan::math::assign(log_psurventry, 0.0);
        }
        current_statement_begin__ = 176;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_psurventry);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_log_psurventry_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T9__, typename T10__>
        typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T9__, T10__>::type>::type
    operator()(const int& entry_tIDX,
                        const int& entry_aIDX,
                        const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                        const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                        const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                        const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                        const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                        const Eigen::Matrix<T7__, Eigen::Dynamic,1>& artrr_MID,
                        const int& artstart_tIDX,
                        const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                        const T10__& dt, std::ostream* pstream__) const {
        return calc_log_psurventry(entry_tIDX, entry_aIDX, cumavoid_time_age, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmxMID_dur_a0, artrr_MID, artstart_tIDX, natsurv_time_age, dt, pstream__);
    }
};

template <typename T4__, typename T5__, typename T6__>
typename boost::math::tools::promote_args<T4__, T5__, T6__>::type
calc_phivn(const int& exit_tIDX,
               const int& exit_aIDX,
               const int& death,
               const int& hivpos,
               const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
               const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
               const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T4__, T5__, T6__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 186;
        fun_scalar_t__ phivn;
        (void) phivn;  // dummy to suppress unused var warning

        stan::math::initialize(phivn, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(phivn,DUMMY_VAR__);


        current_statement_begin__ = 188;
        if (as_bool(hivpos)) {
            current_statement_begin__ = 189;
            stan::math::assign(phivn, 0);
        } else {

            current_statement_begin__ = 191;
            stan::math::assign(phivn, (get_base1(cumavoid_time_age,exit_tIDX,exit_aIDX,"cumavoid_time_age",1) * get_base1(natsurv_time_age,exit_tIDX,exit_aIDX,"natsurv_time_age",1)));
            current_statement_begin__ = 192;
            if (as_bool(death)) {
                current_statement_begin__ = 193;
                stan::math::assign(phivn, (phivn * get_base1(natmx_time_age,exit_tIDX,exit_aIDX,"natmx_time_age",1)));
            }
        }
        current_statement_begin__ = 196;
        return stan::math::promote_scalar<fun_return_scalar_t__>(phivn);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_phivn_functor__ {
    template <typename T4__, typename T5__, typename T6__>
        typename boost::math::tools::promote_args<T4__, T5__, T6__>::type
    operator()(const int& exit_tIDX,
               const int& exit_aIDX,
               const int& death,
               const int& hivpos,
               const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
               const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
               const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age, std::ostream* pstream__) const {
        return calc_phivn(exit_tIDX, exit_aIDX, death, hivpos, cumavoid_time_age, natsurv_time_age, natmx_time_age, pstream__);
    }
};

template <typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T14__, typename T15__, typename T16__>
typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T14__, typename boost::math::tools::promote_args<T15__, T16__>::type>::type>::type
calc_phivp(const int& exit_tIDX,
               const int& exit_aIDX,
               const int& expose_tIDX,
               const int& expose_aIDX,
               const int& expose_DUR,
               const int& death,
               const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
               const Eigen::Matrix<T7__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
               const Eigen::Matrix<T8__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
               const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
               const Eigen::Matrix<T10__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
               const Eigen::Matrix<T11__, Eigen::Dynamic,1>& artrr,
               const Eigen::Matrix<T12__, Eigen::Dynamic,1>& artrr_MID,
               const int& artstart_tIDX,
               const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
               const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
               const T16__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T14__, typename boost::math::tools::promote_args<T15__, T16__>::type>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 211;
        fun_scalar_t__ phivp;
        (void) phivp;  // dummy to suppress unused var warning

        stan::math::initialize(phivp, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(phivp,DUMMY_VAR__);


        current_statement_begin__ = 213;
        if (as_bool(logical_gt(expose_DUR,0))) {
            {
            current_statement_begin__ = 214;
            validate_non_negative_index("phivsurv", "expose_DUR", expose_DUR);
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  phivsurv(static_cast<Eigen::VectorXd::Index>(expose_DUR));
            (void) phivsurv;  // dummy to suppress unused var warning

            stan::math::initialize(phivsurv, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(phivsurv,DUMMY_VAR__);
            current_statement_begin__ = 215;
            validate_non_negative_index("integrand", "expose_DUR", expose_DUR);
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  integrand(static_cast<Eigen::VectorXd::Index>(expose_DUR));
            (void) integrand;  // dummy to suppress unused var warning

            stan::math::initialize(integrand, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(integrand,DUMMY_VAR__);


            current_statement_begin__ = 217;
            stan::math::assign(phivsurv, calc_phivsurv(expose_tIDX,expose_aIDX,expose_DUR,exit_tIDX,hivsurv_dur_a0,hivmxMID_dur_a0,artrr_MID,artstart_tIDX,dt, pstream__));
            current_statement_begin__ = 220;
            for (int ii = 1; ii <= expose_DUR; ++ii) {
                current_statement_begin__ = 221;
                stan::math::assign(get_base1_lhs(integrand,ii,"integrand",1), ((get_base1(cumavoidMID_time_age,((expose_tIDX + ii) - 1),((expose_aIDX + ii) - 1),"cumavoidMID_time_age",1) * get_base1(incrateMID_time_age,((expose_tIDX + ii) - 1),((expose_aIDX + ii) - 1),"incrateMID_time_age",1)) * get_base1(phivsurv,ii,"phivsurv",1)));
            }
            current_statement_begin__ = 225;
            if (as_bool(death)) {
                current_statement_begin__ = 226;
                stan::math::assign(integrand, elt_multiply(integrand,add(calc_hivmx(expose_tIDX,expose_aIDX,expose_DUR,exit_tIDX,hivmx_dur_a0,artrr,artstart_tIDX, pstream__),get_base1(natmx_time_age,exit_tIDX,exit_aIDX,"natmx_time_age",1))));
            }
            current_statement_begin__ = 230;
            stan::math::assign(phivp, ((dt * sum(integrand)) * get_base1(natsurv_time_age,exit_tIDX,exit_aIDX,"natsurv_time_age",1)));
            }
        } else {
            current_statement_begin__ = 232;
            stan::math::assign(phivp, 0.0);
        }
        current_statement_begin__ = 234;
        return stan::math::promote_scalar<fun_return_scalar_t__>(phivp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_phivp_functor__ {
    template <typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T14__, typename T15__, typename T16__>
        typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T14__, typename boost::math::tools::promote_args<T15__, T16__>::type>::type>::type
    operator()(const int& exit_tIDX,
               const int& exit_aIDX,
               const int& expose_tIDX,
               const int& expose_aIDX,
               const int& expose_DUR,
               const int& death,
               const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
               const Eigen::Matrix<T7__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
               const Eigen::Matrix<T8__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
               const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
               const Eigen::Matrix<T10__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
               const Eigen::Matrix<T11__, Eigen::Dynamic,1>& artrr,
               const Eigen::Matrix<T12__, Eigen::Dynamic,1>& artrr_MID,
               const int& artstart_tIDX,
               const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
               const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
               const T16__& dt, std::ostream* pstream__) const {
        return calc_phivp(exit_tIDX, exit_aIDX, expose_tIDX, expose_aIDX, expose_DUR, death, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmx_dur_a0, hivmxMID_dur_a0, artrr, artrr_MID, artstart_tIDX, natsurv_time_age, natmx_time_age, dt, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T6__, T7__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
create_phivp_mat(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                     const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& artrr_MID,
                     const int& artstart_tIDX,
                     const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                     const T7__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T6__, T7__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 246;
        validate_non_negative_index("phivp", "rows(natsurv_time_age)", rows(natsurv_time_age));
        validate_non_negative_index("phivp", "cols(natsurv_time_age)", cols(natsurv_time_age));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  phivp(static_cast<Eigen::VectorXd::Index>(rows(natsurv_time_age)),static_cast<Eigen::VectorXd::Index>(cols(natsurv_time_age)));
        (void) phivp;  // dummy to suppress unused var warning

        stan::math::initialize(phivp, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(phivp,DUMMY_VAR__);
        current_statement_begin__ = 247;
        int steps_time(0);
        (void) steps_time;  // dummy to suppress unused var warning

        stan::math::fill(steps_time, std::numeric_limits<int>::min());
        current_statement_begin__ = 248;
        int steps_age(0);
        (void) steps_age;  // dummy to suppress unused var warning

        stan::math::fill(steps_age, std::numeric_limits<int>::min());


        current_statement_begin__ = 250;
        stan::math::assign(steps_time, rows(natsurv_time_age));
        current_statement_begin__ = 251;
        stan::math::assign(steps_age, cols(natsurv_time_age));
        current_statement_begin__ = 254;
        for (int cidx = (1 - steps_age); cidx <= (steps_time - 1); ++cidx) {
            {
            current_statement_begin__ = 256;
            int min_tidx(0);
            (void) min_tidx;  // dummy to suppress unused var warning

            stan::math::fill(min_tidx, std::numeric_limits<int>::min());
            current_statement_begin__ = 257;
            int max_tidx(0);
            (void) max_tidx;  // dummy to suppress unused var warning

            stan::math::fill(max_tidx, std::numeric_limits<int>::min());
            current_statement_begin__ = 258;
            validate_non_negative_index("incdens_coh", "(steps_time - 1)", (steps_time - 1));
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  incdens_coh(static_cast<Eigen::VectorXd::Index>((steps_time - 1)));
            (void) incdens_coh;  // dummy to suppress unused var warning

            stan::math::initialize(incdens_coh, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(incdens_coh,DUMMY_VAR__);
            current_statement_begin__ = 259;
            validate_non_negative_index("phivsurv_coh", "(steps_time - 1)", (steps_time - 1));
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  phivsurv_coh(static_cast<Eigen::VectorXd::Index>((steps_time - 1)));
            (void) phivsurv_coh;  // dummy to suppress unused var warning

            stan::math::initialize(phivsurv_coh, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(phivsurv_coh,DUMMY_VAR__);


            current_statement_begin__ = 261;
            stan::math::assign(min_tidx, std::max(1,(1 + cidx)));
            current_statement_begin__ = 262;
            stan::math::assign(max_tidx, std::min(steps_time,(steps_age + cidx)));
            current_statement_begin__ = 264;
            for (int tidx = min_tidx; tidx <= max_tidx; ++tidx) {
                current_statement_begin__ = 265;
                if (as_bool(logical_gt(tidx,min_tidx))) {
                    {
                    current_statement_begin__ = 266;
                    int tmin1(0);
                    (void) tmin1;  // dummy to suppress unused var warning

                    stan::math::fill(tmin1, std::numeric_limits<int>::min());
                    current_statement_begin__ = 267;
                    int exp_DUR(0);
                    (void) exp_DUR;  // dummy to suppress unused var warning

                    stan::math::fill(exp_DUR, std::numeric_limits<int>::min());


                    current_statement_begin__ = 268;
                    stan::math::assign(exp_DUR, (tidx - min_tidx));
                    current_statement_begin__ = 270;
                    stan::math::assign(tmin1, (tidx - 1));
                    current_statement_begin__ = 271;
                    stan::math::assign(get_base1_lhs(incdens_coh,tmin1,"incdens_coh",1), (get_base1(cumavoidMID_time_age,tmin1,(tmin1 - cidx),"cumavoidMID_time_age",1) * get_base1(incrateMID_time_age,tmin1,(tmin1 - cidx),"incrateMID_time_age",1)));
                    current_statement_begin__ = 272;
                    if (as_bool(logical_lte(tidx,artstart_tIDX))) {
                        current_statement_begin__ = 273;
                        for (int t0idx = min_tidx; t0idx <= (tidx - 1); ++t0idx) {
                            current_statement_begin__ = 274;
                            stan::math::assign(get_base1_lhs(phivsurv_coh,t0idx,"phivsurv_coh",1), get_base1(hivsurv_dur_a0,(tidx - t0idx),(t0idx - cidx),"hivsurv_dur_a0",1));
                        }
                    } else {

                        current_statement_begin__ = 276;
                        stan::math::assign(get_base1_lhs(phivsurv_coh,tmin1,"phivsurv_coh",1), 1.0);
                        current_statement_begin__ = 277;
                        for (int t0idx = min_tidx; t0idx <= (tidx - 1); ++t0idx) {
                            current_statement_begin__ = 278;
                            stan::math::assign(get_base1_lhs(phivsurv_coh,t0idx,"phivsurv_coh",1), (get_base1(phivsurv_coh,t0idx,"phivsurv_coh",1) * exp(((-(dt) * get_base1(hivmxMID_dur_a0,(tidx - t0idx),(t0idx - cidx),"hivmxMID_dur_a0",1)) * get_base1(artrr_MID,tmin1,"artrr_MID",1)))));
                        }
                    }
                    current_statement_begin__ = 281;
                    stan::math::assign(get_base1_lhs(phivp,tidx,(tidx - cidx),"phivp",1), ((dt * sum(elt_multiply(segment(incdens_coh,min_tidx,exp_DUR),segment(phivsurv_coh,min_tidx,exp_DUR)))) * get_base1(natsurv_time_age,tidx,(tidx - cidx),"natsurv_time_age",1)));
                    }
                } else {
                    current_statement_begin__ = 283;
                    stan::math::assign(get_base1_lhs(phivp,tidx,(tidx - cidx),"phivp",1), 0.0);
                }
            }
            }
        }
        current_statement_begin__ = 286;
        return stan::math::promote_scalar<fun_return_scalar_t__>(phivp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct create_phivp_mat_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T6__, T7__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                     const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& artrr_MID,
                     const int& artstart_tIDX,
                     const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                     const T7__& dt, std::ostream* pstream__) const {
        return create_phivp_mat(cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmxMID_dur_a0, artrr_MID, artstart_tIDX, natsurv_time_age, dt, pstream__);
    }
};

template <typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T20__, typename T21__, typename T22__>
typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type
calc_ll_ind(const int& entry_tIDX,
                const int& entry_aIDX,
                const int& exit_tIDX,
                const int& exit_aIDX,
                const int& expose_tIDX,
                const int& expose_aIDX,
                const int& expose_DUR,
                const int& death,
                const int& deathinterv,
                const int& deathinterv_DUR,
                const int& hivpos,
                const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                const Eigen::Matrix<T17__, Eigen::Dynamic,1>& artrr,
                const Eigen::Matrix<T18__, Eigen::Dynamic,1>& artrr_MID,
                const int& artstart_tIDX,
                const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                const Eigen::Matrix<T21__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                const T22__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 304;
        fun_scalar_t__ log_psurventry;
        (void) log_psurventry;  // dummy to suppress unused var warning

        stan::math::initialize(log_psurventry, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_psurventry,DUMMY_VAR__);
        current_statement_begin__ = 305;
        fun_scalar_t__ phivn;
        (void) phivn;  // dummy to suppress unused var warning

        stan::math::initialize(phivn, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(phivn,DUMMY_VAR__);
        current_statement_begin__ = 306;
        fun_scalar_t__ phivp;
        (void) phivp;  // dummy to suppress unused var warning

        stan::math::initialize(phivp, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(phivp,DUMMY_VAR__);
        current_statement_begin__ = 307;
        fun_scalar_t__ phivn_d;
        (void) phivn_d;  // dummy to suppress unused var warning

        stan::math::initialize(phivn_d, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(phivn_d,DUMMY_VAR__);
        current_statement_begin__ = 308;
        fun_scalar_t__ phivp_d;
        (void) phivp_d;  // dummy to suppress unused var warning

        stan::math::initialize(phivp_d, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(phivp_d,DUMMY_VAR__);


        current_statement_begin__ = 311;
        stan::math::assign(log_psurventry, calc_log_psurventry(entry_tIDX,entry_aIDX,cumavoid_time_age,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmxMID_dur_a0,artrr_MID,artstart_tIDX,natsurv_time_age,dt, pstream__));
        current_statement_begin__ = 316;
        stan::math::assign(phivn, calc_phivn(exit_tIDX,exit_aIDX,death,hivpos,cumavoid_time_age,natsurv_time_age,natmx_time_age, pstream__));
        current_statement_begin__ = 319;
        stan::math::assign(phivp, calc_phivp(exit_tIDX,exit_aIDX,expose_tIDX,expose_aIDX,expose_DUR,death,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
        current_statement_begin__ = 326;
        if (as_bool(deathinterv)) {
            {
            current_statement_begin__ = 330;
            int expose_dinterv_DUR(0);
            (void) expose_dinterv_DUR;  // dummy to suppress unused var warning

            stan::math::fill(expose_dinterv_DUR, std::numeric_limits<int>::min());


            current_statement_begin__ = 331;
            if (as_bool(hivpos)) {
                current_statement_begin__ = 332;
                stan::math::assign(expose_dinterv_DUR, expose_DUR);
            } else {
                current_statement_begin__ = 334;
                stan::math::assign(expose_dinterv_DUR, (expose_DUR + deathinterv_DUR));
            }
            current_statement_begin__ = 336;
            stan::math::assign(phivn_d, calc_phivn((exit_tIDX + deathinterv_DUR),(exit_aIDX + deathinterv_DUR),death,hivpos,cumavoid_time_age,natsurv_time_age,natmx_time_age, pstream__));
            current_statement_begin__ = 339;
            stan::math::assign(phivp_d, calc_phivp((exit_tIDX + deathinterv_DUR),(exit_aIDX + deathinterv_DUR),expose_tIDX,expose_aIDX,expose_dinterv_DUR,death,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
            }
        } else {

            current_statement_begin__ = 346;
            stan::math::assign(phivn_d, 0);
            current_statement_begin__ = 347;
            stan::math::assign(phivp_d, 0);
        }
        current_statement_begin__ = 350;
        return stan::math::promote_scalar<fun_return_scalar_t__>((log((((phivn + phivp) - phivn_d) - phivp_d)) - log_psurventry));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_ll_ind_functor__ {
    template <typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T20__, typename T21__, typename T22__>
        typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type
    operator()(const int& entry_tIDX,
                const int& entry_aIDX,
                const int& exit_tIDX,
                const int& exit_aIDX,
                const int& expose_tIDX,
                const int& expose_aIDX,
                const int& expose_DUR,
                const int& death,
                const int& deathinterv,
                const int& deathinterv_DUR,
                const int& hivpos,
                const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                const Eigen::Matrix<T17__, Eigen::Dynamic,1>& artrr,
                const Eigen::Matrix<T18__, Eigen::Dynamic,1>& artrr_MID,
                const int& artstart_tIDX,
                const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                const Eigen::Matrix<T21__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                const T22__& dt, std::ostream* pstream__) const {
        return calc_ll_ind(entry_tIDX, entry_aIDX, exit_tIDX, exit_aIDX, expose_tIDX, expose_aIDX, expose_DUR, death, deathinterv, deathinterv_DUR, hivpos, cumavoid_time_age, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmx_dur_a0, hivmxMID_dur_a0, artrr, artrr_MID, artstart_tIDX, natsurv_time_age, natmx_time_age, dt, pstream__);
    }
};

template <typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T20__, typename T21__, typename T22__>
Eigen::Matrix<typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type, Eigen::Dynamic,1>
calc_ll_coh(const std::vector<int>& entry_tIDX,
                const std::vector<int>& entry_aIDX,
                const std::vector<int>& exit_tIDX,
                const std::vector<int>& exit_aIDX,
                const std::vector<int>& expose_tIDX,
                const std::vector<int>& expose_aIDX,
                const std::vector<int>& expose_DUR,
                const std::vector<int>& death,
                const std::vector<int>& deathinterv,
                const std::vector<int>& deathinterv_DUR,
                const std::vector<int>& hivpos,
                const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                const Eigen::Matrix<T17__, Eigen::Dynamic,1>& artrr,
                const Eigen::Matrix<T18__, Eigen::Dynamic,1>& artrr_MID,
                const int& artstart_tIDX,
                const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                const Eigen::Matrix<T21__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                const T22__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 367;
        validate_non_negative_index("ll_coh", "size(entry_tIDX)", size(entry_tIDX));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll_coh(static_cast<Eigen::VectorXd::Index>(size(entry_tIDX)));
        (void) ll_coh;  // dummy to suppress unused var warning

        stan::math::initialize(ll_coh, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(ll_coh,DUMMY_VAR__);


        current_statement_begin__ = 369;
        for (int i = 1; i <= size(entry_tIDX); ++i) {
            current_statement_begin__ = 370;
            stan::math::assign(get_base1_lhs(ll_coh,i,"ll_coh",1), calc_ll_ind(get_base1(entry_tIDX,i,"entry_tIDX",1),get_base1(entry_aIDX,i,"entry_aIDX",1),get_base1(exit_tIDX,i,"exit_tIDX",1),get_base1(exit_aIDX,i,"exit_aIDX",1),get_base1(expose_tIDX,i,"expose_tIDX",1),get_base1(expose_aIDX,i,"expose_aIDX",1),get_base1(expose_DUR,i,"expose_DUR",1),get_base1(death,i,"death",1),get_base1(deathinterv,i,"deathinterv",1),get_base1(deathinterv_DUR,i,"deathinterv_DUR",1),get_base1(hivpos,i,"hivpos",1),cumavoid_time_age,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
        }
        current_statement_begin__ = 379;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll_coh);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_ll_coh_functor__ {
    template <typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T20__, typename T21__, typename T22__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& entry_tIDX,
                const std::vector<int>& entry_aIDX,
                const std::vector<int>& exit_tIDX,
                const std::vector<int>& exit_aIDX,
                const std::vector<int>& expose_tIDX,
                const std::vector<int>& expose_aIDX,
                const std::vector<int>& expose_DUR,
                const std::vector<int>& death,
                const std::vector<int>& deathinterv,
                const std::vector<int>& deathinterv_DUR,
                const std::vector<int>& hivpos,
                const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                const Eigen::Matrix<T17__, Eigen::Dynamic,1>& artrr,
                const Eigen::Matrix<T18__, Eigen::Dynamic,1>& artrr_MID,
                const int& artstart_tIDX,
                const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                const Eigen::Matrix<T21__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                const T22__& dt, std::ostream* pstream__) const {
        return calc_ll_coh(entry_tIDX, entry_aIDX, exit_tIDX, exit_aIDX, expose_tIDX, expose_aIDX, expose_DUR, death, deathinterv, deathinterv_DUR, hivpos, cumavoid_time_age, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmx_dur_a0, hivmxMID_dur_a0, artrr, artrr_MID, artstart_tIDX, natsurv_time_age, natmx_time_age, dt, pstream__);
    }
};

template <typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T18__, typename T19__, typename T20__>
typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__, T18__, T19__, T20__>::type>::type>::type
calc_ll_coh_aggr(const std::vector<int>& cohIDX,
                     const std::vector<int>& exit_tIDX,
                     const std::vector<int>& exposestart_tIDX,
                     const std::vector<int>& exposeend_tIDX,
                     const std::vector<int>& death,
                     const std::vector<int>& deathinterv,
                     const std::vector<int>& deathinterv_DUR,
                     const std::vector<int>& hivpos,
                     const Eigen::Matrix<T8__, Eigen::Dynamic,1>& nrepl,
                     const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                     const Eigen::Matrix<T10__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                     const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                     const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                     const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                     const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                     const Eigen::Matrix<T15__, Eigen::Dynamic,1>& artrr,
                     const Eigen::Matrix<T16__, Eigen::Dynamic,1>& artrr_MID,
                     const int& artstart_tIDX,
                     const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                     const Eigen::Matrix<T19__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                     const T20__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__, T18__, T19__, T20__>::type>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 390;
        validate_non_negative_index("ll_one", "rows(nrepl)", rows(nrepl));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll_one(static_cast<Eigen::VectorXd::Index>(rows(nrepl)));
        (void) ll_one;  // dummy to suppress unused var warning

        stan::math::initialize(ll_one, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(ll_one,DUMMY_VAR__);


        current_statement_begin__ = 392;
        for (int i = 1; i <= rows(ll_one); ++i) {
            {
            current_statement_begin__ = 393;
            fun_scalar_t__ phivp;
            (void) phivp;  // dummy to suppress unused var warning

            stan::math::initialize(phivp, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(phivp,DUMMY_VAR__);
            current_statement_begin__ = 394;
            fun_scalar_t__ phivn;
            (void) phivn;  // dummy to suppress unused var warning

            stan::math::initialize(phivn, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(phivn,DUMMY_VAR__);
            current_statement_begin__ = 395;
            fun_scalar_t__ phivp_d;
            (void) phivp_d;  // dummy to suppress unused var warning

            stan::math::initialize(phivp_d, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(phivp_d,DUMMY_VAR__);
            current_statement_begin__ = 396;
            fun_scalar_t__ phivn_d;
            (void) phivn_d;  // dummy to suppress unused var warning

            stan::math::initialize(phivn_d, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(phivn_d,DUMMY_VAR__);


            current_statement_begin__ = 398;
            stan::math::assign(phivp, calc_phivp(get_base1(exit_tIDX,i,"exit_tIDX",1),(get_base1(exit_tIDX,i,"exit_tIDX",1) - get_base1(cohIDX,i,"cohIDX",1)),get_base1(exposestart_tIDX,i,"exposestart_tIDX",1),(get_base1(exposestart_tIDX,i,"exposestart_tIDX",1) - get_base1(cohIDX,i,"cohIDX",1)),((get_base1(exposeend_tIDX,i,"exposeend_tIDX",1) - get_base1(exposestart_tIDX,i,"exposestart_tIDX",1)) + 1),get_base1(death,i,"death",1),cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
            current_statement_begin__ = 404;
            stan::math::assign(phivn, calc_phivn(get_base1(exit_tIDX,i,"exit_tIDX",1),(get_base1(exit_tIDX,i,"exit_tIDX",1) - get_base1(cohIDX,i,"cohIDX",1)),get_base1(death,i,"death",1),get_base1(hivpos,i,"hivpos",1),cumavoid_time_age,natsurv_time_age,natmx_time_age, pstream__));
            current_statement_begin__ = 407;
            if (as_bool(get_base1(deathinterv,i,"deathinterv",1))) {
                {
                current_statement_begin__ = 410;
                int expose_dinterv_DUR(0);
                (void) expose_dinterv_DUR;  // dummy to suppress unused var warning

                stan::math::fill(expose_dinterv_DUR, std::numeric_limits<int>::min());


                current_statement_begin__ = 411;
                if (as_bool(get_base1(hivpos,i,"hivpos",1))) {
                    current_statement_begin__ = 412;
                    stan::math::assign(expose_dinterv_DUR, ((get_base1(exposeend_tIDX,i,"exposeend_tIDX",1) - get_base1(exposestart_tIDX,i,"exposestart_tIDX",1)) + 1));
                } else {
                    current_statement_begin__ = 414;
                    stan::math::assign(expose_dinterv_DUR, (((get_base1(exposeend_tIDX,i,"exposeend_tIDX",1) - get_base1(exposestart_tIDX,i,"exposestart_tIDX",1)) + 1) + get_base1(deathinterv_DUR,i,"deathinterv_DUR",1)));
                }
                current_statement_begin__ = 416;
                stan::math::assign(phivp_d, calc_phivp((get_base1(exit_tIDX,i,"exit_tIDX",1) + get_base1(deathinterv_DUR,i,"deathinterv_DUR",1)),((get_base1(exit_tIDX,i,"exit_tIDX",1) + get_base1(deathinterv_DUR,i,"deathinterv_DUR",1)) - get_base1(cohIDX,i,"cohIDX",1)),get_base1(exposestart_tIDX,i,"exposestart_tIDX",1),(get_base1(exposestart_tIDX,i,"exposestart_tIDX",1) - get_base1(cohIDX,i,"cohIDX",1)),expose_dinterv_DUR,get_base1(death,i,"death",1),cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
                current_statement_begin__ = 423;
                stan::math::assign(phivn_d, calc_phivn((get_base1(exit_tIDX,i,"exit_tIDX",1) + get_base1(deathinterv_DUR,i,"deathinterv_DUR",1)),((get_base1(exit_tIDX,i,"exit_tIDX",1) + get_base1(deathinterv_DUR,i,"deathinterv_DUR",1)) - get_base1(cohIDX,i,"cohIDX",1)),get_base1(death,i,"death",1),get_base1(hivpos,i,"hivpos",1),cumavoid_time_age,natsurv_time_age,natmx_time_age, pstream__));
                }
            } else {

                current_statement_begin__ = 426;
                stan::math::assign(phivp_d, 0);
                current_statement_begin__ = 427;
                stan::math::assign(phivn_d, 0);
            }
            current_statement_begin__ = 430;
            stan::math::assign(get_base1_lhs(ll_one,i,"ll_one",1), log((((phivp + phivn) - phivp_d) - phivn_d)));
            }
        }
        current_statement_begin__ = 433;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dot_product(ll_one,nrepl));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_ll_coh_aggr_functor__ {
    template <typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T18__, typename T19__, typename T20__>
        typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__, T18__, T19__, T20__>::type>::type>::type
    operator()(const std::vector<int>& cohIDX,
                     const std::vector<int>& exit_tIDX,
                     const std::vector<int>& exposestart_tIDX,
                     const std::vector<int>& exposeend_tIDX,
                     const std::vector<int>& death,
                     const std::vector<int>& deathinterv,
                     const std::vector<int>& deathinterv_DUR,
                     const std::vector<int>& hivpos,
                     const Eigen::Matrix<T8__, Eigen::Dynamic,1>& nrepl,
                     const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                     const Eigen::Matrix<T10__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                     const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                     const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                     const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                     const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                     const Eigen::Matrix<T15__, Eigen::Dynamic,1>& artrr,
                     const Eigen::Matrix<T16__, Eigen::Dynamic,1>& artrr_MID,
                     const int& artstart_tIDX,
                     const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                     const Eigen::Matrix<T19__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                     const T20__& dt, std::ostream* pstream__) const {
        return calc_ll_coh_aggr(cohIDX, exit_tIDX, exposestart_tIDX, exposeend_tIDX, death, deathinterv, deathinterv_DUR, hivpos, nrepl, cumavoid_time_age, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmx_dur_a0, hivmxMID_dur_a0, artrr, artrr_MID, artstart_tIDX, natsurv_time_age, natmx_time_age, dt, pstream__);
    }
};

template <typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T19__, typename T20__, typename T21__, typename T22__, typename T24__, typename T25__, typename T26__>
typename boost::math::tools::promote_args<T14__, T15__, T16__, T17__, typename boost::math::tools::promote_args<T18__, T19__, T20__, T21__, typename boost::math::tools::promote_args<T22__, T24__, T25__, T26__>::type>::type>::type
calc_ll_cohexit(const std::vector<int>& coh_cIDX,
                    const std::vector<int>& coh_minexpose_tIDX,
                    const std::vector<int>& coh_maxexpose_tIDX,
                    const std::vector<int>& coh_nexit,
                    const std::vector<int>& exdat_tIDX,
                    const std::vector<int>& exdat_minexpose_tIDX,
                    const std::vector<int>& exdat_maxexpose_tIDX,
                    const std::vector<int>& exdat_ndat,
                    const std::vector<int>& aggr_exposestart_tIDX,
                    const std::vector<int>& aggr_exposeend_tIDX,
                    const std::vector<int>& aggr_death,
                    const std::vector<int>& aggr_deathinterv,
                    const std::vector<int>& aggr_deathinterv_DUR,
                    const std::vector<int>& aggr_hivpos,
                    const Eigen::Matrix<T14__, Eigen::Dynamic,1>& aggr_nrepl,
                    const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                    const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                    const Eigen::Matrix<T17__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                    const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                    const Eigen::Matrix<T19__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                    const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                    const Eigen::Matrix<T21__, Eigen::Dynamic,1>& artrr,
                    const Eigen::Matrix<T22__, Eigen::Dynamic,1>& artrr_MID,
                    const int& artstart_tIDX,
                    const Eigen::Matrix<T24__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                    const Eigen::Matrix<T25__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                    const T26__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T14__, T15__, T16__, T17__, typename boost::math::tools::promote_args<T18__, T19__, T20__, T21__, typename boost::math::tools::promote_args<T22__, T24__, T25__, T26__>::type>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 448;
        validate_non_negative_index("ll_one", "rows(aggr_nrepl)", rows(aggr_nrepl));
        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  ll_one(static_cast<Eigen::VectorXd::Index>(rows(aggr_nrepl)));
        (void) ll_one;  // dummy to suppress unused var warning

        stan::math::initialize(ll_one, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(ll_one,DUMMY_VAR__);
        current_statement_begin__ = 449;
        int aggr_i(0);
        (void) aggr_i;  // dummy to suppress unused var warning

        stan::math::fill(aggr_i, std::numeric_limits<int>::min());
        current_statement_begin__ = 450;
        int exdat_i(0);
        (void) exdat_i;  // dummy to suppress unused var warning

        stan::math::fill(exdat_i, std::numeric_limits<int>::min());
        current_statement_begin__ = 451;
        int max_aggr_i(0);
        (void) max_aggr_i;  // dummy to suppress unused var warning

        stan::math::fill(max_aggr_i, std::numeric_limits<int>::min());
        current_statement_begin__ = 452;
        int max_exdat_i(0);
        (void) max_exdat_i;  // dummy to suppress unused var warning

        stan::math::fill(max_exdat_i, std::numeric_limits<int>::min());


        current_statement_begin__ = 453;
        stan::math::assign(aggr_i, 0);
        current_statement_begin__ = 454;
        stan::math::assign(exdat_i, 0);
        current_statement_begin__ = 455;
        stan::math::assign(max_aggr_i, 0);
        current_statement_begin__ = 456;
        stan::math::assign(max_exdat_i, 0);
        current_statement_begin__ = 458;
        for (int coh_i = 1; coh_i <= size(coh_cIDX); ++coh_i) {
            {
            current_statement_begin__ = 460;
            int cidx(0);
            (void) cidx;  // dummy to suppress unused var warning

            stan::math::fill(cidx, std::numeric_limits<int>::min());
            current_statement_begin__ = 461;
            validate_non_negative_index("incdens_coh", "rows(cumavoidMID_time_age)", rows(cumavoidMID_time_age));
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  incdens_coh(static_cast<Eigen::VectorXd::Index>(rows(cumavoidMID_time_age)));
            (void) incdens_coh;  // dummy to suppress unused var warning

            stan::math::initialize(incdens_coh, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(incdens_coh,DUMMY_VAR__);
            current_statement_begin__ = 462;
            validate_non_negative_index("phivsurv_coh", "rows(cumavoidMID_time_age)", rows(cumavoidMID_time_age));
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  phivsurv_coh(static_cast<Eigen::VectorXd::Index>(rows(cumavoidMID_time_age)));
            (void) phivsurv_coh;  // dummy to suppress unused var warning

            stan::math::initialize(phivsurv_coh, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(phivsurv_coh,DUMMY_VAR__);
            current_statement_begin__ = 463;
            int eidx_prev(0);
            (void) eidx_prev;  // dummy to suppress unused var warning

            stan::math::fill(eidx_prev, std::numeric_limits<int>::min());


            current_statement_begin__ = 465;
            stan::math::assign(cidx, get_base1(coh_cIDX,coh_i,"coh_cIDX",1));
            current_statement_begin__ = 466;
            stan::math::assign(eidx_prev, 0);
            current_statement_begin__ = 468;
            for (int tidx = get_base1(coh_minexpose_tIDX,coh_i,"coh_minexpose_tIDX",1); tidx <= get_base1(coh_maxexpose_tIDX,coh_i,"coh_maxexpose_tIDX",1); ++tidx) {
                current_statement_begin__ = 469;
                stan::math::assign(get_base1_lhs(incdens_coh,tidx,"incdens_coh",1), (get_base1(cumavoidMID_time_age,tidx,(tidx - cidx),"cumavoidMID_time_age",1) * get_base1(incrateMID_time_age,tidx,(tidx - cidx),"incrateMID_time_age",1)));
            }
            current_statement_begin__ = 471;
            for (int ii = artstart_tIDX; ii <= get_base1(coh_maxexpose_tIDX,coh_i,"coh_maxexpose_tIDX",1); ++ii) {
                current_statement_begin__ = 472;
                stan::math::assign(get_base1_lhs(phivsurv_coh,ii,"phivsurv_coh",1), 1.0);
            }
            current_statement_begin__ = 474;
            stan::math::assign(max_exdat_i, (max_exdat_i + get_base1(coh_nexit,coh_i,"coh_nexit",1)));
            current_statement_begin__ = 475;
            while (as_bool(logical_lt(exdat_i,max_exdat_i))) {
                {
                current_statement_begin__ = 477;
                int eidx(0);
                (void) eidx;  // dummy to suppress unused var warning

                stan::math::fill(eidx, std::numeric_limits<int>::min());
                current_statement_begin__ = 478;
                fun_scalar_t__ phivn_exit;
                (void) phivn_exit;  // dummy to suppress unused var warning

                stan::math::initialize(phivn_exit, std::numeric_limits<double>::quiet_NaN());
                stan::math::fill(phivn_exit,DUMMY_VAR__);


                current_statement_begin__ = 480;
                stan::math::assign(exdat_i, (exdat_i + 1));
                current_statement_begin__ = 481;
                stan::math::assign(eidx, get_base1(exdat_tIDX,exdat_i,"exdat_tIDX",1));
                current_statement_begin__ = 483;
                stan::math::assign(phivn_exit, (get_base1(cumavoid_time_age,eidx,(eidx - cidx),"cumavoid_time_age",1) * get_base1(natsurv_time_age,eidx,(eidx - cidx),"natsurv_time_age",1)));
                current_statement_begin__ = 487;
                if (as_bool(logical_lte(eidx,artstart_tIDX))) {

                    current_statement_begin__ = 488;
                    for (int t0idx = get_base1(exdat_minexpose_tIDX,exdat_i,"exdat_minexpose_tIDX",1); t0idx <= get_base1(exdat_maxexpose_tIDX,exdat_i,"exdat_maxexpose_tIDX",1); ++t0idx) {
                        current_statement_begin__ = 489;
                        stan::math::assign(get_base1_lhs(phivsurv_coh,t0idx,"phivsurv_coh",1), get_base1(hivsurv_dur_a0,(eidx - t0idx),(t0idx - cidx),"hivsurv_dur_a0",1));
                    }
                } else {

                    current_statement_begin__ = 493;
                    if (as_bool(logical_lt(eidx_prev,artstart_tIDX))) {

                        current_statement_begin__ = 494;
                        for (int t0idx = get_base1(exdat_minexpose_tIDX,exdat_i,"exdat_minexpose_tIDX",1); t0idx <= (artstart_tIDX - 1); ++t0idx) {
                            current_statement_begin__ = 495;
                            stan::math::assign(get_base1_lhs(phivsurv_coh,t0idx,"phivsurv_coh",1), get_base1(hivsurv_dur_a0,(artstart_tIDX - t0idx),(t0idx - cidx),"hivsurv_dur_a0",1));
                        }
                        current_statement_begin__ = 496;
                        stan::math::assign(eidx_prev, artstart_tIDX);
                    }
                    current_statement_begin__ = 500;
                    for (int t0idx = get_base1(exdat_minexpose_tIDX,exdat_i,"exdat_minexpose_tIDX",1); t0idx <= get_base1(exdat_maxexpose_tIDX,exdat_i,"exdat_maxexpose_tIDX",1); ++t0idx) {
                        {
                        current_statement_begin__ = 502;
                        int a0idx(0);
                        (void) a0idx;  // dummy to suppress unused var warning

                        stan::math::fill(a0idx, std::numeric_limits<int>::min());
                        current_statement_begin__ = 503;
                        int t0idxminus1(0);
                        (void) t0idxminus1;  // dummy to suppress unused var warning

                        stan::math::fill(t0idxminus1, std::numeric_limits<int>::min());
                        current_statement_begin__ = 504;
                        fun_scalar_t__ cumhaz;
                        (void) cumhaz;  // dummy to suppress unused var warning

                        stan::math::initialize(cumhaz, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(cumhaz,DUMMY_VAR__);


                        current_statement_begin__ = 506;
                        stan::math::assign(a0idx, (t0idx - cidx));
                        current_statement_begin__ = 507;
                        stan::math::assign(t0idxminus1, (t0idx - 1));
                        current_statement_begin__ = 508;
                        stan::math::assign(cumhaz, 0);
                        current_statement_begin__ = 510;
                        for (int jj = std::max(t0idx,eidx_prev); jj <= (eidx - 1); ++jj) {
                            current_statement_begin__ = 511;
                            stan::math::assign(cumhaz, (cumhaz + (get_base1(hivmxMID_dur_a0,(jj - t0idxminus1),a0idx,"hivmxMID_dur_a0",1) * get_base1(artrr_MID,jj,"artrr_MID",1))));
                        }
                        current_statement_begin__ = 513;
                        stan::math::assign(get_base1_lhs(phivsurv_coh,t0idx,"phivsurv_coh",1), (get_base1(phivsurv_coh,t0idx,"phivsurv_coh",1) * exp((-(dt) * cumhaz))));
                        }
                    }
                }
                current_statement_begin__ = 517;
                stan::math::assign(eidx_prev, eidx);
                current_statement_begin__ = 519;
                stan::math::assign(max_aggr_i, (max_aggr_i + get_base1(exdat_ndat,exdat_i,"exdat_ndat",1)));
                current_statement_begin__ = 520;
                while (as_bool(logical_lt(aggr_i,max_aggr_i))) {
                    {
                    current_statement_begin__ = 522;
                    fun_scalar_t__ phivp;
                    (void) phivp;  // dummy to suppress unused var warning

                    stan::math::initialize(phivp, std::numeric_limits<double>::quiet_NaN());
                    stan::math::fill(phivp,DUMMY_VAR__);
                    current_statement_begin__ = 523;
                    fun_scalar_t__ phivn;
                    (void) phivn;  // dummy to suppress unused var warning

                    stan::math::initialize(phivn, std::numeric_limits<double>::quiet_NaN());
                    stan::math::fill(phivn,DUMMY_VAR__);
                    current_statement_begin__ = 524;
                    int i_expose_tIDX(0);
                    (void) i_expose_tIDX;  // dummy to suppress unused var warning

                    stan::math::fill(i_expose_tIDX, std::numeric_limits<int>::min());
                    current_statement_begin__ = 525;
                    int i_expose_DUR(0);
                    (void) i_expose_DUR;  // dummy to suppress unused var warning

                    stan::math::fill(i_expose_DUR, std::numeric_limits<int>::min());


                    current_statement_begin__ = 527;
                    stan::math::assign(aggr_i, (aggr_i + 1));
                    current_statement_begin__ = 530;
                    if (as_bool(get_base1(aggr_hivpos,aggr_i,"aggr_hivpos",1))) {
                        current_statement_begin__ = 531;
                        stan::math::assign(phivn, 0);
                    } else {

                        current_statement_begin__ = 533;
                        stan::math::assign(phivn, phivn_exit);
                        current_statement_begin__ = 534;
                        if (as_bool(get_base1(aggr_death,aggr_i,"aggr_death",1))) {
                            current_statement_begin__ = 535;
                            stan::math::assign(phivn, (phivn * get_base1(natmx_time_age,eidx,(eidx - cidx),"natmx_time_age",1)));
                        }
                    }
                    current_statement_begin__ = 539;
                    stan::math::assign(i_expose_tIDX, get_base1(aggr_exposestart_tIDX,aggr_i,"aggr_exposestart_tIDX",1));
                    current_statement_begin__ = 540;
                    stan::math::assign(i_expose_DUR, ((get_base1(aggr_exposeend_tIDX,aggr_i,"aggr_exposeend_tIDX",1) - i_expose_tIDX) + 1));
                    current_statement_begin__ = 541;
                    if (as_bool(logical_gt(i_expose_DUR,0))) {
                        {
                        current_statement_begin__ = 543;
                        validate_non_negative_index("integrand", "i_expose_DUR", i_expose_DUR);
                        Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  integrand(static_cast<Eigen::VectorXd::Index>(i_expose_DUR));
                        (void) integrand;  // dummy to suppress unused var warning

                        stan::math::initialize(integrand, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(integrand,DUMMY_VAR__);


                        current_statement_begin__ = 545;
                        stan::math::assign(integrand, elt_multiply(segment(incdens_coh,i_expose_tIDX,i_expose_DUR),segment(phivsurv_coh,i_expose_tIDX,i_expose_DUR)));
                        current_statement_begin__ = 547;
                        if (as_bool(get_base1(aggr_death,aggr_i,"aggr_death",1))) {
                            {
                            current_statement_begin__ = 548;
                            validate_non_negative_index("hivmx", "i_expose_DUR", i_expose_DUR);
                            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  hivmx(static_cast<Eigen::VectorXd::Index>(i_expose_DUR));
                            (void) hivmx;  // dummy to suppress unused var warning

                            stan::math::initialize(hivmx, std::numeric_limits<double>::quiet_NaN());
                            stan::math::fill(hivmx,DUMMY_VAR__);


                            current_statement_begin__ = 549;
                            for (int t0idx = i_expose_tIDX; t0idx <= get_base1(aggr_exposeend_tIDX,aggr_i,"aggr_exposeend_tIDX",1); ++t0idx) {
                                current_statement_begin__ = 550;
                                stan::math::assign(get_base1_lhs(hivmx,((t0idx - i_expose_tIDX) + 1),"hivmx",1), get_base1(hivmx_dur_a0,(eidx - t0idx),(t0idx - cidx),"hivmx_dur_a0",1));
                            }
                            current_statement_begin__ = 551;
                            if (as_bool(logical_gt(eidx,artstart_tIDX))) {
                                current_statement_begin__ = 552;
                                stan::math::assign(hivmx, multiply(hivmx,get_base1(artrr,eidx,"artrr",1)));
                            }
                            current_statement_begin__ = 554;
                            stan::math::assign(integrand, elt_multiply(integrand,add(hivmx,get_base1(natmx_time_age,eidx,(eidx - cidx),"natmx_time_age",1))));
                            }
                        }
                        current_statement_begin__ = 557;
                        stan::math::assign(phivp, ((dt * sum(integrand)) * get_base1(natsurv_time_age,eidx,(eidx - cidx),"natsurv_time_age",1)));
                        }
                    } else {
                        current_statement_begin__ = 560;
                        stan::math::assign(phivp, 0.0);
                    }
                    current_statement_begin__ = 562;
                    if (as_bool(get_base1(aggr_deathinterv,aggr_i,"aggr_deathinterv",1))) {
                        {
                        current_statement_begin__ = 570;
                        int dur_i(0);
                        (void) dur_i;  // dummy to suppress unused var warning

                        stan::math::fill(dur_i, std::numeric_limits<int>::min());
                        current_statement_begin__ = 571;
                        fun_scalar_t__ phivn_d;
                        (void) phivn_d;  // dummy to suppress unused var warning

                        stan::math::initialize(phivn_d, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(phivn_d,DUMMY_VAR__);
                        current_statement_begin__ = 572;
                        fun_scalar_t__ phivp_d;
                        (void) phivp_d;  // dummy to suppress unused var warning

                        stan::math::initialize(phivp_d, std::numeric_limits<double>::quiet_NaN());
                        stan::math::fill(phivp_d,DUMMY_VAR__);


                        current_statement_begin__ = 574;
                        stan::math::assign(dur_i, get_base1(aggr_deathinterv_DUR,aggr_i,"aggr_deathinterv_DUR",1));
                        current_statement_begin__ = 575;
                        stan::math::assign(phivn_d, calc_phivn((eidx + dur_i),((eidx + dur_i) - cidx),0,get_base1(aggr_hivpos,aggr_i,"aggr_hivpos",1),cumavoid_time_age,natsurv_time_age,natmx_time_age, pstream__));
                        current_statement_begin__ = 581;
                        if (as_bool(logical_negation(get_base1(aggr_hivpos,aggr_i,"aggr_hivpos",1)))) {
                            current_statement_begin__ = 582;
                            stan::math::assign(i_expose_DUR, (i_expose_DUR + dur_i));
                        }
                        current_statement_begin__ = 584;
                        stan::math::assign(phivp_d, calc_phivp((eidx + dur_i),((eidx + dur_i) - cidx),i_expose_tIDX,(i_expose_tIDX - cidx),i_expose_DUR,0,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
                        current_statement_begin__ = 591;
                        stan::math::assign(phivn, (phivn - phivn_d));
                        current_statement_begin__ = 592;
                        stan::math::assign(phivp, (phivp - phivp_d));
                        }
                    }
                    current_statement_begin__ = 595;
                    stan::math::assign(get_base1_lhs(ll_one,aggr_i,"ll_one",1), log((phivn + phivp)));
                    }
                }
                }
            }
            }
        }
        current_statement_begin__ = 600;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dot_product(ll_one,aggr_nrepl));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_ll_cohexit_functor__ {
    template <typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T19__, typename T20__, typename T21__, typename T22__, typename T24__, typename T25__, typename T26__>
        typename boost::math::tools::promote_args<T14__, T15__, T16__, T17__, typename boost::math::tools::promote_args<T18__, T19__, T20__, T21__, typename boost::math::tools::promote_args<T22__, T24__, T25__, T26__>::type>::type>::type
    operator()(const std::vector<int>& coh_cIDX,
                    const std::vector<int>& coh_minexpose_tIDX,
                    const std::vector<int>& coh_maxexpose_tIDX,
                    const std::vector<int>& coh_nexit,
                    const std::vector<int>& exdat_tIDX,
                    const std::vector<int>& exdat_minexpose_tIDX,
                    const std::vector<int>& exdat_maxexpose_tIDX,
                    const std::vector<int>& exdat_ndat,
                    const std::vector<int>& aggr_exposestart_tIDX,
                    const std::vector<int>& aggr_exposeend_tIDX,
                    const std::vector<int>& aggr_death,
                    const std::vector<int>& aggr_deathinterv,
                    const std::vector<int>& aggr_deathinterv_DUR,
                    const std::vector<int>& aggr_hivpos,
                    const Eigen::Matrix<T14__, Eigen::Dynamic,1>& aggr_nrepl,
                    const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                    const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                    const Eigen::Matrix<T17__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                    const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                    const Eigen::Matrix<T19__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                    const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                    const Eigen::Matrix<T21__, Eigen::Dynamic,1>& artrr,
                    const Eigen::Matrix<T22__, Eigen::Dynamic,1>& artrr_MID,
                    const int& artstart_tIDX,
                    const Eigen::Matrix<T24__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                    const Eigen::Matrix<T25__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                    const T26__& dt, std::ostream* pstream__) const {
        return calc_ll_cohexit(coh_cIDX, coh_minexpose_tIDX, coh_maxexpose_tIDX, coh_nexit, exdat_tIDX, exdat_minexpose_tIDX, exdat_maxexpose_tIDX, exdat_ndat, aggr_exposestart_tIDX, aggr_exposeend_tIDX, aggr_death, aggr_deathinterv, aggr_deathinterv_DUR, aggr_hivpos, aggr_nrepl, cumavoid_time_age, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmx_dur_a0, hivmxMID_dur_a0, artrr, artrr_MID, artstart_tIDX, natsurv_time_age, natmx_time_age, dt, pstream__);
    }
};

#include <meta_header.hpp>
 class model_le_interact : public prob_grad {
private:
    double dt;
    int STEPS_time;
    int STEPS_age;
    int artstart_tIDX;
    vector_d x_time;
    vector_d x_age;
    int NCOH;
    vector<int> coh_cIDX;
    vector<int> coh_minexpose_tIDX;
    vector<int> coh_maxexpose_tIDX;
    vector<int> coh_nexit;
    int NEXIT;
    vector<int> exdat_tIDX;
    vector<int> exdat_minexpose_tIDX;
    vector<int> exdat_maxexpose_tIDX;
    vector<int> exdat_ndat;
    int NAGGR;
    vector<int> aggr_exposestart_tIDX;
    vector<int> aggr_exposeend_tIDX;
    vector<int> aggr_hivpos;
    vector<int> aggr_death;
    vector<int> aggr_deathinterv;
    vector<int> aggr_deathinterv_DUR;
    vector_d aggr_nrepl;
    int nk_incrate_time;
    int nk_incrate_age;
    matrix_d X_incrate_time;
    matrix_d Xmid_incrate_time;
    matrix_d X_incrate_age;
    matrix_d Xmid_incrate_age;
    int pen_ord_incrate;
    matrix_d D_incrate_time;
    matrix_d D_incrate_age;
    matrix_d Pcar_prec_incrate;
    int nk_natmx_time;
    int nk_natmx_age;
    matrix_d X_natmx_time;
    matrix_d Xmid_natmx_time;
    matrix_d X_natmx_age;
    matrix_d Xmid_natmx_age;
    int pen_ord_natmx_time;
    int pen_ord_natmx_age;
    matrix_d D_natmx_time;
    matrix_d D_natmx_age;
    int fixcoef_natmx_time;
    int fixcoef_natmx_age;
    int pen_ord_art;
    matrix_d D_art;
    vector_d X_hivsurv_age;
public:
    model_le_interact(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_le_interact(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_le_interact_namespace::model_le_interact";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 605;
            context__.validate_dims("data initialization", "dt", "double", context__.to_vec());
            dt = double(0);
            vals_r__ = context__.vals_r("dt");
            pos__ = 0;
            dt = vals_r__[pos__++];
            current_statement_begin__ = 606;
            context__.validate_dims("data initialization", "STEPS_time", "int", context__.to_vec());
            STEPS_time = int(0);
            vals_i__ = context__.vals_i("STEPS_time");
            pos__ = 0;
            STEPS_time = vals_i__[pos__++];
            current_statement_begin__ = 607;
            context__.validate_dims("data initialization", "STEPS_age", "int", context__.to_vec());
            STEPS_age = int(0);
            vals_i__ = context__.vals_i("STEPS_age");
            pos__ = 0;
            STEPS_age = vals_i__[pos__++];
            current_statement_begin__ = 608;
            context__.validate_dims("data initialization", "artstart_tIDX", "int", context__.to_vec());
            artstart_tIDX = int(0);
            vals_i__ = context__.vals_i("artstart_tIDX");
            pos__ = 0;
            artstart_tIDX = vals_i__[pos__++];
            current_statement_begin__ = 610;
            validate_non_negative_index("x_time", "STEPS_time", STEPS_time);
            context__.validate_dims("data initialization", "x_time", "vector_d", context__.to_vec(STEPS_time));
            validate_non_negative_index("x_time", "STEPS_time", STEPS_time);
            x_time = vector_d(static_cast<Eigen::VectorXd::Index>(STEPS_time));
            vals_r__ = context__.vals_r("x_time");
            pos__ = 0;
            size_t x_time_i_vec_lim__ = STEPS_time;
            for (size_t i_vec__ = 0; i_vec__ < x_time_i_vec_lim__; ++i_vec__) {
                x_time[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 611;
            validate_non_negative_index("x_age", "STEPS_age", STEPS_age);
            context__.validate_dims("data initialization", "x_age", "vector_d", context__.to_vec(STEPS_age));
            validate_non_negative_index("x_age", "STEPS_age", STEPS_age);
            x_age = vector_d(static_cast<Eigen::VectorXd::Index>(STEPS_age));
            vals_r__ = context__.vals_r("x_age");
            pos__ = 0;
            size_t x_age_i_vec_lim__ = STEPS_age;
            for (size_t i_vec__ = 0; i_vec__ < x_age_i_vec_lim__; ++i_vec__) {
                x_age[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 614;
            context__.validate_dims("data initialization", "NCOH", "int", context__.to_vec());
            NCOH = int(0);
            vals_i__ = context__.vals_i("NCOH");
            pos__ = 0;
            NCOH = vals_i__[pos__++];
            current_statement_begin__ = 616;
            validate_non_negative_index("coh_cIDX", "NCOH", NCOH);
            context__.validate_dims("data initialization", "coh_cIDX", "int", context__.to_vec(NCOH));
            validate_non_negative_index("coh_cIDX", "NCOH", NCOH);
            coh_cIDX = std::vector<int>(NCOH,int(0));
            vals_i__ = context__.vals_i("coh_cIDX");
            pos__ = 0;
            size_t coh_cIDX_limit_0__ = NCOH;
            for (size_t i_0__ = 0; i_0__ < coh_cIDX_limit_0__; ++i_0__) {
                coh_cIDX[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 617;
            validate_non_negative_index("coh_minexpose_tIDX", "NCOH", NCOH);
            context__.validate_dims("data initialization", "coh_minexpose_tIDX", "int", context__.to_vec(NCOH));
            validate_non_negative_index("coh_minexpose_tIDX", "NCOH", NCOH);
            coh_minexpose_tIDX = std::vector<int>(NCOH,int(0));
            vals_i__ = context__.vals_i("coh_minexpose_tIDX");
            pos__ = 0;
            size_t coh_minexpose_tIDX_limit_0__ = NCOH;
            for (size_t i_0__ = 0; i_0__ < coh_minexpose_tIDX_limit_0__; ++i_0__) {
                coh_minexpose_tIDX[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 618;
            validate_non_negative_index("coh_maxexpose_tIDX", "NCOH", NCOH);
            context__.validate_dims("data initialization", "coh_maxexpose_tIDX", "int", context__.to_vec(NCOH));
            validate_non_negative_index("coh_maxexpose_tIDX", "NCOH", NCOH);
            coh_maxexpose_tIDX = std::vector<int>(NCOH,int(0));
            vals_i__ = context__.vals_i("coh_maxexpose_tIDX");
            pos__ = 0;
            size_t coh_maxexpose_tIDX_limit_0__ = NCOH;
            for (size_t i_0__ = 0; i_0__ < coh_maxexpose_tIDX_limit_0__; ++i_0__) {
                coh_maxexpose_tIDX[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 619;
            validate_non_negative_index("coh_nexit", "NCOH", NCOH);
            context__.validate_dims("data initialization", "coh_nexit", "int", context__.to_vec(NCOH));
            validate_non_negative_index("coh_nexit", "NCOH", NCOH);
            coh_nexit = std::vector<int>(NCOH,int(0));
            vals_i__ = context__.vals_i("coh_nexit");
            pos__ = 0;
            size_t coh_nexit_limit_0__ = NCOH;
            for (size_t i_0__ = 0; i_0__ < coh_nexit_limit_0__; ++i_0__) {
                coh_nexit[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 622;
            context__.validate_dims("data initialization", "NEXIT", "int", context__.to_vec());
            NEXIT = int(0);
            vals_i__ = context__.vals_i("NEXIT");
            pos__ = 0;
            NEXIT = vals_i__[pos__++];
            current_statement_begin__ = 624;
            validate_non_negative_index("exdat_tIDX", "NEXIT", NEXIT);
            context__.validate_dims("data initialization", "exdat_tIDX", "int", context__.to_vec(NEXIT));
            validate_non_negative_index("exdat_tIDX", "NEXIT", NEXIT);
            exdat_tIDX = std::vector<int>(NEXIT,int(0));
            vals_i__ = context__.vals_i("exdat_tIDX");
            pos__ = 0;
            size_t exdat_tIDX_limit_0__ = NEXIT;
            for (size_t i_0__ = 0; i_0__ < exdat_tIDX_limit_0__; ++i_0__) {
                exdat_tIDX[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 625;
            validate_non_negative_index("exdat_minexpose_tIDX", "NEXIT", NEXIT);
            context__.validate_dims("data initialization", "exdat_minexpose_tIDX", "int", context__.to_vec(NEXIT));
            validate_non_negative_index("exdat_minexpose_tIDX", "NEXIT", NEXIT);
            exdat_minexpose_tIDX = std::vector<int>(NEXIT,int(0));
            vals_i__ = context__.vals_i("exdat_minexpose_tIDX");
            pos__ = 0;
            size_t exdat_minexpose_tIDX_limit_0__ = NEXIT;
            for (size_t i_0__ = 0; i_0__ < exdat_minexpose_tIDX_limit_0__; ++i_0__) {
                exdat_minexpose_tIDX[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 626;
            validate_non_negative_index("exdat_maxexpose_tIDX", "NEXIT", NEXIT);
            context__.validate_dims("data initialization", "exdat_maxexpose_tIDX", "int", context__.to_vec(NEXIT));
            validate_non_negative_index("exdat_maxexpose_tIDX", "NEXIT", NEXIT);
            exdat_maxexpose_tIDX = std::vector<int>(NEXIT,int(0));
            vals_i__ = context__.vals_i("exdat_maxexpose_tIDX");
            pos__ = 0;
            size_t exdat_maxexpose_tIDX_limit_0__ = NEXIT;
            for (size_t i_0__ = 0; i_0__ < exdat_maxexpose_tIDX_limit_0__; ++i_0__) {
                exdat_maxexpose_tIDX[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 627;
            validate_non_negative_index("exdat_ndat", "NEXIT", NEXIT);
            context__.validate_dims("data initialization", "exdat_ndat", "int", context__.to_vec(NEXIT));
            validate_non_negative_index("exdat_ndat", "NEXIT", NEXIT);
            exdat_ndat = std::vector<int>(NEXIT,int(0));
            vals_i__ = context__.vals_i("exdat_ndat");
            pos__ = 0;
            size_t exdat_ndat_limit_0__ = NEXIT;
            for (size_t i_0__ = 0; i_0__ < exdat_ndat_limit_0__; ++i_0__) {
                exdat_ndat[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 630;
            context__.validate_dims("data initialization", "NAGGR", "int", context__.to_vec());
            NAGGR = int(0);
            vals_i__ = context__.vals_i("NAGGR");
            pos__ = 0;
            NAGGR = vals_i__[pos__++];
            current_statement_begin__ = 632;
            validate_non_negative_index("aggr_exposestart_tIDX", "NAGGR", NAGGR);
            context__.validate_dims("data initialization", "aggr_exposestart_tIDX", "int", context__.to_vec(NAGGR));
            validate_non_negative_index("aggr_exposestart_tIDX", "NAGGR", NAGGR);
            aggr_exposestart_tIDX = std::vector<int>(NAGGR,int(0));
            vals_i__ = context__.vals_i("aggr_exposestart_tIDX");
            pos__ = 0;
            size_t aggr_exposestart_tIDX_limit_0__ = NAGGR;
            for (size_t i_0__ = 0; i_0__ < aggr_exposestart_tIDX_limit_0__; ++i_0__) {
                aggr_exposestart_tIDX[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 633;
            validate_non_negative_index("aggr_exposeend_tIDX", "NAGGR", NAGGR);
            context__.validate_dims("data initialization", "aggr_exposeend_tIDX", "int", context__.to_vec(NAGGR));
            validate_non_negative_index("aggr_exposeend_tIDX", "NAGGR", NAGGR);
            aggr_exposeend_tIDX = std::vector<int>(NAGGR,int(0));
            vals_i__ = context__.vals_i("aggr_exposeend_tIDX");
            pos__ = 0;
            size_t aggr_exposeend_tIDX_limit_0__ = NAGGR;
            for (size_t i_0__ = 0; i_0__ < aggr_exposeend_tIDX_limit_0__; ++i_0__) {
                aggr_exposeend_tIDX[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 634;
            validate_non_negative_index("aggr_hivpos", "NAGGR", NAGGR);
            context__.validate_dims("data initialization", "aggr_hivpos", "int", context__.to_vec(NAGGR));
            validate_non_negative_index("aggr_hivpos", "NAGGR", NAGGR);
            aggr_hivpos = std::vector<int>(NAGGR,int(0));
            vals_i__ = context__.vals_i("aggr_hivpos");
            pos__ = 0;
            size_t aggr_hivpos_limit_0__ = NAGGR;
            for (size_t i_0__ = 0; i_0__ < aggr_hivpos_limit_0__; ++i_0__) {
                aggr_hivpos[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 635;
            validate_non_negative_index("aggr_death", "NAGGR", NAGGR);
            context__.validate_dims("data initialization", "aggr_death", "int", context__.to_vec(NAGGR));
            validate_non_negative_index("aggr_death", "NAGGR", NAGGR);
            aggr_death = std::vector<int>(NAGGR,int(0));
            vals_i__ = context__.vals_i("aggr_death");
            pos__ = 0;
            size_t aggr_death_limit_0__ = NAGGR;
            for (size_t i_0__ = 0; i_0__ < aggr_death_limit_0__; ++i_0__) {
                aggr_death[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 636;
            validate_non_negative_index("aggr_deathinterv", "NAGGR", NAGGR);
            context__.validate_dims("data initialization", "aggr_deathinterv", "int", context__.to_vec(NAGGR));
            validate_non_negative_index("aggr_deathinterv", "NAGGR", NAGGR);
            aggr_deathinterv = std::vector<int>(NAGGR,int(0));
            vals_i__ = context__.vals_i("aggr_deathinterv");
            pos__ = 0;
            size_t aggr_deathinterv_limit_0__ = NAGGR;
            for (size_t i_0__ = 0; i_0__ < aggr_deathinterv_limit_0__; ++i_0__) {
                aggr_deathinterv[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 637;
            validate_non_negative_index("aggr_deathinterv_DUR", "NAGGR", NAGGR);
            context__.validate_dims("data initialization", "aggr_deathinterv_DUR", "int", context__.to_vec(NAGGR));
            validate_non_negative_index("aggr_deathinterv_DUR", "NAGGR", NAGGR);
            aggr_deathinterv_DUR = std::vector<int>(NAGGR,int(0));
            vals_i__ = context__.vals_i("aggr_deathinterv_DUR");
            pos__ = 0;
            size_t aggr_deathinterv_DUR_limit_0__ = NAGGR;
            for (size_t i_0__ = 0; i_0__ < aggr_deathinterv_DUR_limit_0__; ++i_0__) {
                aggr_deathinterv_DUR[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 638;
            validate_non_negative_index("aggr_nrepl", "NAGGR", NAGGR);
            context__.validate_dims("data initialization", "aggr_nrepl", "vector_d", context__.to_vec(NAGGR));
            validate_non_negative_index("aggr_nrepl", "NAGGR", NAGGR);
            aggr_nrepl = vector_d(static_cast<Eigen::VectorXd::Index>(NAGGR));
            vals_r__ = context__.vals_r("aggr_nrepl");
            pos__ = 0;
            size_t aggr_nrepl_i_vec_lim__ = NAGGR;
            for (size_t i_vec__ = 0; i_vec__ < aggr_nrepl_i_vec_lim__; ++i_vec__) {
                aggr_nrepl[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 644;
            context__.validate_dims("data initialization", "nk_incrate_time", "int", context__.to_vec());
            nk_incrate_time = int(0);
            vals_i__ = context__.vals_i("nk_incrate_time");
            pos__ = 0;
            nk_incrate_time = vals_i__[pos__++];
            current_statement_begin__ = 645;
            context__.validate_dims("data initialization", "nk_incrate_age", "int", context__.to_vec());
            nk_incrate_age = int(0);
            vals_i__ = context__.vals_i("nk_incrate_age");
            pos__ = 0;
            nk_incrate_age = vals_i__[pos__++];
            current_statement_begin__ = 647;
            validate_non_negative_index("X_incrate_time", "STEPS_time", STEPS_time);
            validate_non_negative_index("X_incrate_time", "nk_incrate_time", nk_incrate_time);
            context__.validate_dims("data initialization", "X_incrate_time", "matrix_d", context__.to_vec(STEPS_time,nk_incrate_time));
            validate_non_negative_index("X_incrate_time", "STEPS_time", STEPS_time);
            validate_non_negative_index("X_incrate_time", "nk_incrate_time", nk_incrate_time);
            X_incrate_time = matrix_d(static_cast<Eigen::VectorXd::Index>(STEPS_time),static_cast<Eigen::VectorXd::Index>(nk_incrate_time));
            vals_r__ = context__.vals_r("X_incrate_time");
            pos__ = 0;
            size_t X_incrate_time_m_mat_lim__ = STEPS_time;
            size_t X_incrate_time_n_mat_lim__ = nk_incrate_time;
            for (size_t n_mat__ = 0; n_mat__ < X_incrate_time_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_incrate_time_m_mat_lim__; ++m_mat__) {
                    X_incrate_time(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 648;
            validate_non_negative_index("Xmid_incrate_time", "(STEPS_time - 1)", (STEPS_time - 1));
            validate_non_negative_index("Xmid_incrate_time", "nk_incrate_time", nk_incrate_time);
            context__.validate_dims("data initialization", "Xmid_incrate_time", "matrix_d", context__.to_vec((STEPS_time - 1),nk_incrate_time));
            validate_non_negative_index("Xmid_incrate_time", "(STEPS_time - 1)", (STEPS_time - 1));
            validate_non_negative_index("Xmid_incrate_time", "nk_incrate_time", nk_incrate_time);
            Xmid_incrate_time = matrix_d(static_cast<Eigen::VectorXd::Index>((STEPS_time - 1)),static_cast<Eigen::VectorXd::Index>(nk_incrate_time));
            vals_r__ = context__.vals_r("Xmid_incrate_time");
            pos__ = 0;
            size_t Xmid_incrate_time_m_mat_lim__ = (STEPS_time - 1);
            size_t Xmid_incrate_time_n_mat_lim__ = nk_incrate_time;
            for (size_t n_mat__ = 0; n_mat__ < Xmid_incrate_time_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < Xmid_incrate_time_m_mat_lim__; ++m_mat__) {
                    Xmid_incrate_time(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 649;
            validate_non_negative_index("X_incrate_age", "STEPS_age", STEPS_age);
            validate_non_negative_index("X_incrate_age", "nk_incrate_age", nk_incrate_age);
            context__.validate_dims("data initialization", "X_incrate_age", "matrix_d", context__.to_vec(STEPS_age,nk_incrate_age));
            validate_non_negative_index("X_incrate_age", "STEPS_age", STEPS_age);
            validate_non_negative_index("X_incrate_age", "nk_incrate_age", nk_incrate_age);
            X_incrate_age = matrix_d(static_cast<Eigen::VectorXd::Index>(STEPS_age),static_cast<Eigen::VectorXd::Index>(nk_incrate_age));
            vals_r__ = context__.vals_r("X_incrate_age");
            pos__ = 0;
            size_t X_incrate_age_m_mat_lim__ = STEPS_age;
            size_t X_incrate_age_n_mat_lim__ = nk_incrate_age;
            for (size_t n_mat__ = 0; n_mat__ < X_incrate_age_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_incrate_age_m_mat_lim__; ++m_mat__) {
                    X_incrate_age(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 650;
            validate_non_negative_index("Xmid_incrate_age", "(STEPS_age - 1)", (STEPS_age - 1));
            validate_non_negative_index("Xmid_incrate_age", "nk_incrate_age", nk_incrate_age);
            context__.validate_dims("data initialization", "Xmid_incrate_age", "matrix_d", context__.to_vec((STEPS_age - 1),nk_incrate_age));
            validate_non_negative_index("Xmid_incrate_age", "(STEPS_age - 1)", (STEPS_age - 1));
            validate_non_negative_index("Xmid_incrate_age", "nk_incrate_age", nk_incrate_age);
            Xmid_incrate_age = matrix_d(static_cast<Eigen::VectorXd::Index>((STEPS_age - 1)),static_cast<Eigen::VectorXd::Index>(nk_incrate_age));
            vals_r__ = context__.vals_r("Xmid_incrate_age");
            pos__ = 0;
            size_t Xmid_incrate_age_m_mat_lim__ = (STEPS_age - 1);
            size_t Xmid_incrate_age_n_mat_lim__ = nk_incrate_age;
            for (size_t n_mat__ = 0; n_mat__ < Xmid_incrate_age_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < Xmid_incrate_age_m_mat_lim__; ++m_mat__) {
                    Xmid_incrate_age(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 652;
            context__.validate_dims("data initialization", "pen_ord_incrate", "int", context__.to_vec());
            pen_ord_incrate = int(0);
            vals_i__ = context__.vals_i("pen_ord_incrate");
            pos__ = 0;
            pen_ord_incrate = vals_i__[pos__++];
            current_statement_begin__ = 654;
            validate_non_negative_index("D_incrate_time", "(nk_incrate_time - pen_ord_incrate)", (nk_incrate_time - pen_ord_incrate));
            validate_non_negative_index("D_incrate_time", "nk_incrate_time", nk_incrate_time);
            context__.validate_dims("data initialization", "D_incrate_time", "matrix_d", context__.to_vec((nk_incrate_time - pen_ord_incrate),nk_incrate_time));
            validate_non_negative_index("D_incrate_time", "(nk_incrate_time - pen_ord_incrate)", (nk_incrate_time - pen_ord_incrate));
            validate_non_negative_index("D_incrate_time", "nk_incrate_time", nk_incrate_time);
            D_incrate_time = matrix_d(static_cast<Eigen::VectorXd::Index>((nk_incrate_time - pen_ord_incrate)),static_cast<Eigen::VectorXd::Index>(nk_incrate_time));
            vals_r__ = context__.vals_r("D_incrate_time");
            pos__ = 0;
            size_t D_incrate_time_m_mat_lim__ = (nk_incrate_time - pen_ord_incrate);
            size_t D_incrate_time_n_mat_lim__ = nk_incrate_time;
            for (size_t n_mat__ = 0; n_mat__ < D_incrate_time_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < D_incrate_time_m_mat_lim__; ++m_mat__) {
                    D_incrate_time(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 655;
            validate_non_negative_index("D_incrate_age", "(nk_incrate_age - pen_ord_incrate)", (nk_incrate_age - pen_ord_incrate));
            validate_non_negative_index("D_incrate_age", "nk_incrate_age", nk_incrate_age);
            context__.validate_dims("data initialization", "D_incrate_age", "matrix_d", context__.to_vec((nk_incrate_age - pen_ord_incrate),nk_incrate_age));
            validate_non_negative_index("D_incrate_age", "(nk_incrate_age - pen_ord_incrate)", (nk_incrate_age - pen_ord_incrate));
            validate_non_negative_index("D_incrate_age", "nk_incrate_age", nk_incrate_age);
            D_incrate_age = matrix_d(static_cast<Eigen::VectorXd::Index>((nk_incrate_age - pen_ord_incrate)),static_cast<Eigen::VectorXd::Index>(nk_incrate_age));
            vals_r__ = context__.vals_r("D_incrate_age");
            pos__ = 0;
            size_t D_incrate_age_m_mat_lim__ = (nk_incrate_age - pen_ord_incrate);
            size_t D_incrate_age_n_mat_lim__ = nk_incrate_age;
            for (size_t n_mat__ = 0; n_mat__ < D_incrate_age_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < D_incrate_age_m_mat_lim__; ++m_mat__) {
                    D_incrate_age(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 656;
            validate_non_negative_index("Pcar_prec_incrate", "(nk_incrate_time * nk_incrate_age)", (nk_incrate_time * nk_incrate_age));
            validate_non_negative_index("Pcar_prec_incrate", "(nk_incrate_time * nk_incrate_age)", (nk_incrate_time * nk_incrate_age));
            context__.validate_dims("data initialization", "Pcar_prec_incrate", "matrix_d", context__.to_vec((nk_incrate_time * nk_incrate_age),(nk_incrate_time * nk_incrate_age)));
            validate_non_negative_index("Pcar_prec_incrate", "(nk_incrate_time * nk_incrate_age)", (nk_incrate_time * nk_incrate_age));
            validate_non_negative_index("Pcar_prec_incrate", "(nk_incrate_time * nk_incrate_age)", (nk_incrate_time * nk_incrate_age));
            Pcar_prec_incrate = matrix_d(static_cast<Eigen::VectorXd::Index>((nk_incrate_time * nk_incrate_age)),static_cast<Eigen::VectorXd::Index>((nk_incrate_time * nk_incrate_age)));
            vals_r__ = context__.vals_r("Pcar_prec_incrate");
            pos__ = 0;
            size_t Pcar_prec_incrate_m_mat_lim__ = (nk_incrate_time * nk_incrate_age);
            size_t Pcar_prec_incrate_n_mat_lim__ = (nk_incrate_time * nk_incrate_age);
            for (size_t n_mat__ = 0; n_mat__ < Pcar_prec_incrate_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < Pcar_prec_incrate_m_mat_lim__; ++m_mat__) {
                    Pcar_prec_incrate(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 660;
            context__.validate_dims("data initialization", "nk_natmx_time", "int", context__.to_vec());
            nk_natmx_time = int(0);
            vals_i__ = context__.vals_i("nk_natmx_time");
            pos__ = 0;
            nk_natmx_time = vals_i__[pos__++];
            current_statement_begin__ = 661;
            context__.validate_dims("data initialization", "nk_natmx_age", "int", context__.to_vec());
            nk_natmx_age = int(0);
            vals_i__ = context__.vals_i("nk_natmx_age");
            pos__ = 0;
            nk_natmx_age = vals_i__[pos__++];
            current_statement_begin__ = 663;
            validate_non_negative_index("X_natmx_time", "STEPS_time", STEPS_time);
            validate_non_negative_index("X_natmx_time", "nk_natmx_time", nk_natmx_time);
            context__.validate_dims("data initialization", "X_natmx_time", "matrix_d", context__.to_vec(STEPS_time,nk_natmx_time));
            validate_non_negative_index("X_natmx_time", "STEPS_time", STEPS_time);
            validate_non_negative_index("X_natmx_time", "nk_natmx_time", nk_natmx_time);
            X_natmx_time = matrix_d(static_cast<Eigen::VectorXd::Index>(STEPS_time),static_cast<Eigen::VectorXd::Index>(nk_natmx_time));
            vals_r__ = context__.vals_r("X_natmx_time");
            pos__ = 0;
            size_t X_natmx_time_m_mat_lim__ = STEPS_time;
            size_t X_natmx_time_n_mat_lim__ = nk_natmx_time;
            for (size_t n_mat__ = 0; n_mat__ < X_natmx_time_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_natmx_time_m_mat_lim__; ++m_mat__) {
                    X_natmx_time(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 664;
            validate_non_negative_index("Xmid_natmx_time", "(STEPS_time - 1)", (STEPS_time - 1));
            validate_non_negative_index("Xmid_natmx_time", "nk_natmx_time", nk_natmx_time);
            context__.validate_dims("data initialization", "Xmid_natmx_time", "matrix_d", context__.to_vec((STEPS_time - 1),nk_natmx_time));
            validate_non_negative_index("Xmid_natmx_time", "(STEPS_time - 1)", (STEPS_time - 1));
            validate_non_negative_index("Xmid_natmx_time", "nk_natmx_time", nk_natmx_time);
            Xmid_natmx_time = matrix_d(static_cast<Eigen::VectorXd::Index>((STEPS_time - 1)),static_cast<Eigen::VectorXd::Index>(nk_natmx_time));
            vals_r__ = context__.vals_r("Xmid_natmx_time");
            pos__ = 0;
            size_t Xmid_natmx_time_m_mat_lim__ = (STEPS_time - 1);
            size_t Xmid_natmx_time_n_mat_lim__ = nk_natmx_time;
            for (size_t n_mat__ = 0; n_mat__ < Xmid_natmx_time_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < Xmid_natmx_time_m_mat_lim__; ++m_mat__) {
                    Xmid_natmx_time(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 665;
            validate_non_negative_index("X_natmx_age", "STEPS_age", STEPS_age);
            validate_non_negative_index("X_natmx_age", "nk_natmx_age", nk_natmx_age);
            context__.validate_dims("data initialization", "X_natmx_age", "matrix_d", context__.to_vec(STEPS_age,nk_natmx_age));
            validate_non_negative_index("X_natmx_age", "STEPS_age", STEPS_age);
            validate_non_negative_index("X_natmx_age", "nk_natmx_age", nk_natmx_age);
            X_natmx_age = matrix_d(static_cast<Eigen::VectorXd::Index>(STEPS_age),static_cast<Eigen::VectorXd::Index>(nk_natmx_age));
            vals_r__ = context__.vals_r("X_natmx_age");
            pos__ = 0;
            size_t X_natmx_age_m_mat_lim__ = STEPS_age;
            size_t X_natmx_age_n_mat_lim__ = nk_natmx_age;
            for (size_t n_mat__ = 0; n_mat__ < X_natmx_age_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < X_natmx_age_m_mat_lim__; ++m_mat__) {
                    X_natmx_age(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 666;
            validate_non_negative_index("Xmid_natmx_age", "(STEPS_age - 1)", (STEPS_age - 1));
            validate_non_negative_index("Xmid_natmx_age", "nk_natmx_age", nk_natmx_age);
            context__.validate_dims("data initialization", "Xmid_natmx_age", "matrix_d", context__.to_vec((STEPS_age - 1),nk_natmx_age));
            validate_non_negative_index("Xmid_natmx_age", "(STEPS_age - 1)", (STEPS_age - 1));
            validate_non_negative_index("Xmid_natmx_age", "nk_natmx_age", nk_natmx_age);
            Xmid_natmx_age = matrix_d(static_cast<Eigen::VectorXd::Index>((STEPS_age - 1)),static_cast<Eigen::VectorXd::Index>(nk_natmx_age));
            vals_r__ = context__.vals_r("Xmid_natmx_age");
            pos__ = 0;
            size_t Xmid_natmx_age_m_mat_lim__ = (STEPS_age - 1);
            size_t Xmid_natmx_age_n_mat_lim__ = nk_natmx_age;
            for (size_t n_mat__ = 0; n_mat__ < Xmid_natmx_age_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < Xmid_natmx_age_m_mat_lim__; ++m_mat__) {
                    Xmid_natmx_age(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 668;
            context__.validate_dims("data initialization", "pen_ord_natmx_time", "int", context__.to_vec());
            pen_ord_natmx_time = int(0);
            vals_i__ = context__.vals_i("pen_ord_natmx_time");
            pos__ = 0;
            pen_ord_natmx_time = vals_i__[pos__++];
            current_statement_begin__ = 669;
            context__.validate_dims("data initialization", "pen_ord_natmx_age", "int", context__.to_vec());
            pen_ord_natmx_age = int(0);
            vals_i__ = context__.vals_i("pen_ord_natmx_age");
            pos__ = 0;
            pen_ord_natmx_age = vals_i__[pos__++];
            current_statement_begin__ = 671;
            validate_non_negative_index("D_natmx_time", "(nk_natmx_time - pen_ord_natmx_time)", (nk_natmx_time - pen_ord_natmx_time));
            validate_non_negative_index("D_natmx_time", "nk_natmx_time", nk_natmx_time);
            context__.validate_dims("data initialization", "D_natmx_time", "matrix_d", context__.to_vec((nk_natmx_time - pen_ord_natmx_time),nk_natmx_time));
            validate_non_negative_index("D_natmx_time", "(nk_natmx_time - pen_ord_natmx_time)", (nk_natmx_time - pen_ord_natmx_time));
            validate_non_negative_index("D_natmx_time", "nk_natmx_time", nk_natmx_time);
            D_natmx_time = matrix_d(static_cast<Eigen::VectorXd::Index>((nk_natmx_time - pen_ord_natmx_time)),static_cast<Eigen::VectorXd::Index>(nk_natmx_time));
            vals_r__ = context__.vals_r("D_natmx_time");
            pos__ = 0;
            size_t D_natmx_time_m_mat_lim__ = (nk_natmx_time - pen_ord_natmx_time);
            size_t D_natmx_time_n_mat_lim__ = nk_natmx_time;
            for (size_t n_mat__ = 0; n_mat__ < D_natmx_time_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < D_natmx_time_m_mat_lim__; ++m_mat__) {
                    D_natmx_time(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 672;
            validate_non_negative_index("D_natmx_age", "(nk_natmx_age - pen_ord_natmx_age)", (nk_natmx_age - pen_ord_natmx_age));
            validate_non_negative_index("D_natmx_age", "nk_natmx_age", nk_natmx_age);
            context__.validate_dims("data initialization", "D_natmx_age", "matrix_d", context__.to_vec((nk_natmx_age - pen_ord_natmx_age),nk_natmx_age));
            validate_non_negative_index("D_natmx_age", "(nk_natmx_age - pen_ord_natmx_age)", (nk_natmx_age - pen_ord_natmx_age));
            validate_non_negative_index("D_natmx_age", "nk_natmx_age", nk_natmx_age);
            D_natmx_age = matrix_d(static_cast<Eigen::VectorXd::Index>((nk_natmx_age - pen_ord_natmx_age)),static_cast<Eigen::VectorXd::Index>(nk_natmx_age));
            vals_r__ = context__.vals_r("D_natmx_age");
            pos__ = 0;
            size_t D_natmx_age_m_mat_lim__ = (nk_natmx_age - pen_ord_natmx_age);
            size_t D_natmx_age_n_mat_lim__ = nk_natmx_age;
            for (size_t n_mat__ = 0; n_mat__ < D_natmx_age_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < D_natmx_age_m_mat_lim__; ++m_mat__) {
                    D_natmx_age(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 674;
            context__.validate_dims("data initialization", "fixcoef_natmx_time", "int", context__.to_vec());
            fixcoef_natmx_time = int(0);
            vals_i__ = context__.vals_i("fixcoef_natmx_time");
            pos__ = 0;
            fixcoef_natmx_time = vals_i__[pos__++];
            current_statement_begin__ = 675;
            context__.validate_dims("data initialization", "fixcoef_natmx_age", "int", context__.to_vec());
            fixcoef_natmx_age = int(0);
            vals_i__ = context__.vals_i("fixcoef_natmx_age");
            pos__ = 0;
            fixcoef_natmx_age = vals_i__[pos__++];
            current_statement_begin__ = 683;
            context__.validate_dims("data initialization", "pen_ord_art", "int", context__.to_vec());
            pen_ord_art = int(0);
            vals_i__ = context__.vals_i("pen_ord_art");
            pos__ = 0;
            pen_ord_art = vals_i__[pos__++];
            current_statement_begin__ = 684;
            validate_non_negative_index("D_art", "((STEPS_time - artstart_tIDX) - pen_ord_art)", ((STEPS_time - artstart_tIDX) - pen_ord_art));
            validate_non_negative_index("D_art", "(STEPS_time - artstart_tIDX)", (STEPS_time - artstart_tIDX));
            context__.validate_dims("data initialization", "D_art", "matrix_d", context__.to_vec(((STEPS_time - artstart_tIDX) - pen_ord_art),(STEPS_time - artstart_tIDX)));
            validate_non_negative_index("D_art", "((STEPS_time - artstart_tIDX) - pen_ord_art)", ((STEPS_time - artstart_tIDX) - pen_ord_art));
            validate_non_negative_index("D_art", "(STEPS_time - artstart_tIDX)", (STEPS_time - artstart_tIDX));
            D_art = matrix_d(static_cast<Eigen::VectorXd::Index>(((STEPS_time - artstart_tIDX) - pen_ord_art)),static_cast<Eigen::VectorXd::Index>((STEPS_time - artstart_tIDX)));
            vals_r__ = context__.vals_r("D_art");
            pos__ = 0;
            size_t D_art_m_mat_lim__ = ((STEPS_time - artstart_tIDX) - pen_ord_art);
            size_t D_art_n_mat_lim__ = (STEPS_time - artstart_tIDX);
            for (size_t n_mat__ = 0; n_mat__ < D_art_n_mat_lim__; ++n_mat__) {
                for (size_t m_mat__ = 0; m_mat__ < D_art_m_mat_lim__; ++m_mat__) {
                    D_art(m_mat__,n_mat__) = vals_r__[pos__++];
                }
            }

            // validate, data variables
            current_statement_begin__ = 605;
            check_greater_or_equal(function__,"dt",dt,0);
            current_statement_begin__ = 606;
            check_greater_or_equal(function__,"STEPS_time",STEPS_time,1);
            current_statement_begin__ = 607;
            check_greater_or_equal(function__,"STEPS_age",STEPS_age,1);
            current_statement_begin__ = 608;
            check_greater_or_equal(function__,"artstart_tIDX",artstart_tIDX,1);
            check_less_or_equal(function__,"artstart_tIDX",artstart_tIDX,STEPS_time);
            current_statement_begin__ = 610;
            current_statement_begin__ = 611;
            current_statement_begin__ = 614;
            check_greater_or_equal(function__,"NCOH",NCOH,1);
            current_statement_begin__ = 616;
            current_statement_begin__ = 617;
            for (int k0__ = 0; k0__ < NCOH; ++k0__) {
                check_greater_or_equal(function__,"coh_minexpose_tIDX[k0__]",coh_minexpose_tIDX[k0__],1);
                check_less_or_equal(function__,"coh_minexpose_tIDX[k0__]",coh_minexpose_tIDX[k0__],STEPS_time);
            }
            current_statement_begin__ = 618;
            for (int k0__ = 0; k0__ < NCOH; ++k0__) {
                check_greater_or_equal(function__,"coh_maxexpose_tIDX[k0__]",coh_maxexpose_tIDX[k0__],1);
                check_less_or_equal(function__,"coh_maxexpose_tIDX[k0__]",coh_maxexpose_tIDX[k0__],(STEPS_time - 1));
            }
            current_statement_begin__ = 619;
            for (int k0__ = 0; k0__ < NCOH; ++k0__) {
                check_greater_or_equal(function__,"coh_nexit[k0__]",coh_nexit[k0__],1);
            }
            current_statement_begin__ = 622;
            check_greater_or_equal(function__,"NEXIT",NEXIT,NCOH);
            current_statement_begin__ = 624;
            for (int k0__ = 0; k0__ < NEXIT; ++k0__) {
                check_greater_or_equal(function__,"exdat_tIDX[k0__]",exdat_tIDX[k0__],1);
                check_less_or_equal(function__,"exdat_tIDX[k0__]",exdat_tIDX[k0__],STEPS_time);
            }
            current_statement_begin__ = 625;
            for (int k0__ = 0; k0__ < NEXIT; ++k0__) {
                check_greater_or_equal(function__,"exdat_minexpose_tIDX[k0__]",exdat_minexpose_tIDX[k0__],1);
                check_less_or_equal(function__,"exdat_minexpose_tIDX[k0__]",exdat_minexpose_tIDX[k0__],STEPS_time);
            }
            current_statement_begin__ = 626;
            for (int k0__ = 0; k0__ < NEXIT; ++k0__) {
                check_greater_or_equal(function__,"exdat_maxexpose_tIDX[k0__]",exdat_maxexpose_tIDX[k0__],1);
                check_less_or_equal(function__,"exdat_maxexpose_tIDX[k0__]",exdat_maxexpose_tIDX[k0__],STEPS_time);
            }
            current_statement_begin__ = 627;
            for (int k0__ = 0; k0__ < NEXIT; ++k0__) {
                check_greater_or_equal(function__,"exdat_ndat[k0__]",exdat_ndat[k0__],1);
            }
            current_statement_begin__ = 630;
            check_greater_or_equal(function__,"NAGGR",NAGGR,NEXIT);
            current_statement_begin__ = 632;
            for (int k0__ = 0; k0__ < NAGGR; ++k0__) {
                check_greater_or_equal(function__,"aggr_exposestart_tIDX[k0__]",aggr_exposestart_tIDX[k0__],1);
                check_less_or_equal(function__,"aggr_exposestart_tIDX[k0__]",aggr_exposestart_tIDX[k0__],STEPS_time);
            }
            current_statement_begin__ = 633;
            for (int k0__ = 0; k0__ < NAGGR; ++k0__) {
                check_greater_or_equal(function__,"aggr_exposeend_tIDX[k0__]",aggr_exposeend_tIDX[k0__],1);
                check_less_or_equal(function__,"aggr_exposeend_tIDX[k0__]",aggr_exposeend_tIDX[k0__],STEPS_time);
            }
            current_statement_begin__ = 634;
            for (int k0__ = 0; k0__ < NAGGR; ++k0__) {
                check_greater_or_equal(function__,"aggr_hivpos[k0__]",aggr_hivpos[k0__],0);
                check_less_or_equal(function__,"aggr_hivpos[k0__]",aggr_hivpos[k0__],1);
            }
            current_statement_begin__ = 635;
            for (int k0__ = 0; k0__ < NAGGR; ++k0__) {
                check_greater_or_equal(function__,"aggr_death[k0__]",aggr_death[k0__],0);
                check_less_or_equal(function__,"aggr_death[k0__]",aggr_death[k0__],1);
            }
            current_statement_begin__ = 636;
            for (int k0__ = 0; k0__ < NAGGR; ++k0__) {
                check_greater_or_equal(function__,"aggr_deathinterv[k0__]",aggr_deathinterv[k0__],0);
                check_less_or_equal(function__,"aggr_deathinterv[k0__]",aggr_deathinterv[k0__],1);
            }
            current_statement_begin__ = 637;
            for (int k0__ = 0; k0__ < NAGGR; ++k0__) {
                check_greater_or_equal(function__,"aggr_deathinterv_DUR[k0__]",aggr_deathinterv_DUR[k0__],0);
                check_less_or_equal(function__,"aggr_deathinterv_DUR[k0__]",aggr_deathinterv_DUR[k0__],STEPS_time);
            }
            current_statement_begin__ = 638;
            current_statement_begin__ = 644;
            check_greater_or_equal(function__,"nk_incrate_time",nk_incrate_time,5);
            current_statement_begin__ = 645;
            check_greater_or_equal(function__,"nk_incrate_age",nk_incrate_age,5);
            current_statement_begin__ = 647;
            current_statement_begin__ = 648;
            current_statement_begin__ = 649;
            current_statement_begin__ = 650;
            current_statement_begin__ = 652;
            check_greater_or_equal(function__,"pen_ord_incrate",pen_ord_incrate,0);
            current_statement_begin__ = 654;
            current_statement_begin__ = 655;
            current_statement_begin__ = 656;
            current_statement_begin__ = 660;
            check_greater_or_equal(function__,"nk_natmx_time",nk_natmx_time,5);
            current_statement_begin__ = 661;
            check_greater_or_equal(function__,"nk_natmx_age",nk_natmx_age,5);
            current_statement_begin__ = 663;
            current_statement_begin__ = 664;
            current_statement_begin__ = 665;
            current_statement_begin__ = 666;
            current_statement_begin__ = 668;
            check_greater_or_equal(function__,"pen_ord_natmx_time",pen_ord_natmx_time,0);
            current_statement_begin__ = 669;
            check_greater_or_equal(function__,"pen_ord_natmx_age",pen_ord_natmx_age,0);
            current_statement_begin__ = 671;
            current_statement_begin__ = 672;
            current_statement_begin__ = 674;
            check_greater_or_equal(function__,"fixcoef_natmx_time",fixcoef_natmx_time,1);
            check_less_or_equal(function__,"fixcoef_natmx_time",fixcoef_natmx_time,nk_natmx_time);
            current_statement_begin__ = 675;
            check_greater_or_equal(function__,"fixcoef_natmx_age",fixcoef_natmx_age,1);
            check_less_or_equal(function__,"fixcoef_natmx_age",fixcoef_natmx_age,nk_natmx_age);
            current_statement_begin__ = 683;
            check_greater_or_equal(function__,"pen_ord_art",pen_ord_art,0);
            current_statement_begin__ = 684;
            // initialize data variables
            current_statement_begin__ = 697;
            validate_non_negative_index("X_hivsurv_age", "(STEPS_age - 1)", (STEPS_age - 1));
            X_hivsurv_age = vector_d(static_cast<Eigen::VectorXd::Index>((STEPS_age - 1)));
            stan::math::fill(X_hivsurv_age,DUMMY_VAR__);

            current_statement_begin__ = 698;
            stan::math::assign(X_hivsurv_age, divide(subtract(subtract(stan::model::rvalue(x_age, stan::model::cons_list(stan::model::index_min(2), stan::model::nil_index_list()), "x_age"),(dt / 2)),30),10));

            // validate transformed data
            current_statement_begin__ = 697;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 702;
        validate_non_negative_index("coef_incrate_time_age", "nk_incrate_time", nk_incrate_time);
            validate_non_negative_index("coef_incrate_time_age", "nk_incrate_age", nk_incrate_age);
            num_params_r__ += nk_incrate_time * nk_incrate_age;
            current_statement_begin__ = 703;
            validate_non_negative_index("coef_natmx_time", "nk_natmx_time", nk_natmx_time);
            num_params_r__ += nk_natmx_time;
            current_statement_begin__ = 704;
            validate_non_negative_index("param_natmx_age", "(nk_natmx_age - 1)", (nk_natmx_age - 1));
            num_params_r__ += (nk_natmx_age - 1);
            current_statement_begin__ = 705;
            validate_non_negative_index("dt_log_artrr", "(STEPS_time - artstart_tIDX)", (STEPS_time - artstart_tIDX));
            num_params_r__ += (STEPS_time - artstart_tIDX);
            current_statement_begin__ = 706;
            ++num_params_r__;
            current_statement_begin__ = 707;
            ++num_params_r__;
            current_statement_begin__ = 708;
            ++num_params_r__;
            current_statement_begin__ = 709;
            ++num_params_r__;
            current_statement_begin__ = 710;
            ++num_params_r__;
            current_statement_begin__ = 711;
            ++num_params_r__;
            current_statement_begin__ = 712;
            ++num_params_r__;
            current_statement_begin__ = 713;
            ++num_params_r__;
            current_statement_begin__ = 714;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_le_interact() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("coef_incrate_time_age")))
            throw std::runtime_error("variable coef_incrate_time_age missing");
        vals_r__ = context__.vals_r("coef_incrate_time_age");
        pos__ = 0U;
        validate_non_negative_index("coef_incrate_time_age", "nk_incrate_time", nk_incrate_time);
        validate_non_negative_index("coef_incrate_time_age", "nk_incrate_age", nk_incrate_age);
        context__.validate_dims("initialization", "coef_incrate_time_age", "matrix_d", context__.to_vec(nk_incrate_time,nk_incrate_age));
        matrix_d coef_incrate_time_age(static_cast<Eigen::VectorXd::Index>(nk_incrate_time),static_cast<Eigen::VectorXd::Index>(nk_incrate_age));
        for (int j2__ = 0U; j2__ < nk_incrate_age; ++j2__)
            for (int j1__ = 0U; j1__ < nk_incrate_time; ++j1__)
                coef_incrate_time_age(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(coef_incrate_time_age);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable coef_incrate_time_age: ") + e.what());
        }

        if (!(context__.contains_r("coef_natmx_time")))
            throw std::runtime_error("variable coef_natmx_time missing");
        vals_r__ = context__.vals_r("coef_natmx_time");
        pos__ = 0U;
        validate_non_negative_index("coef_natmx_time", "nk_natmx_time", nk_natmx_time);
        context__.validate_dims("initialization", "coef_natmx_time", "vector_d", context__.to_vec(nk_natmx_time));
        vector_d coef_natmx_time(static_cast<Eigen::VectorXd::Index>(nk_natmx_time));
        for (int j1__ = 0U; j1__ < nk_natmx_time; ++j1__)
            coef_natmx_time(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(coef_natmx_time);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable coef_natmx_time: ") + e.what());
        }

        if (!(context__.contains_r("param_natmx_age")))
            throw std::runtime_error("variable param_natmx_age missing");
        vals_r__ = context__.vals_r("param_natmx_age");
        pos__ = 0U;
        validate_non_negative_index("param_natmx_age", "(nk_natmx_age - 1)", (nk_natmx_age - 1));
        context__.validate_dims("initialization", "param_natmx_age", "vector_d", context__.to_vec((nk_natmx_age - 1)));
        vector_d param_natmx_age(static_cast<Eigen::VectorXd::Index>((nk_natmx_age - 1)));
        for (int j1__ = 0U; j1__ < (nk_natmx_age - 1); ++j1__)
            param_natmx_age(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(param_natmx_age);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable param_natmx_age: ") + e.what());
        }

        if (!(context__.contains_r("dt_log_artrr")))
            throw std::runtime_error("variable dt_log_artrr missing");
        vals_r__ = context__.vals_r("dt_log_artrr");
        pos__ = 0U;
        validate_non_negative_index("dt_log_artrr", "(STEPS_time - artstart_tIDX)", (STEPS_time - artstart_tIDX));
        context__.validate_dims("initialization", "dt_log_artrr", "vector_d", context__.to_vec((STEPS_time - artstart_tIDX)));
        vector_d dt_log_artrr(static_cast<Eigen::VectorXd::Index>((STEPS_time - artstart_tIDX)));
        for (int j1__ = 0U; j1__ < (STEPS_time - artstart_tIDX); ++j1__)
            dt_log_artrr(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_ub_unconstrain(0,dt_log_artrr);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable dt_log_artrr: ") + e.what());
        }

        if (!(context__.contains_r("sigma_incrate_time_age")))
            throw std::runtime_error("variable sigma_incrate_time_age missing");
        vals_r__ = context__.vals_r("sigma_incrate_time_age");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_incrate_time_age", "double", context__.to_vec());
        double sigma_incrate_time_age(0);
        sigma_incrate_time_age = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_incrate_time_age);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_incrate_time_age: ") + e.what());
        }

        if (!(context__.contains_r("sigma_incrate_time")))
            throw std::runtime_error("variable sigma_incrate_time missing");
        vals_r__ = context__.vals_r("sigma_incrate_time");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_incrate_time", "double", context__.to_vec());
        double sigma_incrate_time(0);
        sigma_incrate_time = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_incrate_time);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_incrate_time: ") + e.what());
        }

        if (!(context__.contains_r("sigma_incrate_age")))
            throw std::runtime_error("variable sigma_incrate_age missing");
        vals_r__ = context__.vals_r("sigma_incrate_age");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_incrate_age", "double", context__.to_vec());
        double sigma_incrate_age(0);
        sigma_incrate_age = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_incrate_age);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_incrate_age: ") + e.what());
        }

        if (!(context__.contains_r("sigma_natmx_time")))
            throw std::runtime_error("variable sigma_natmx_time missing");
        vals_r__ = context__.vals_r("sigma_natmx_time");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_natmx_time", "double", context__.to_vec());
        double sigma_natmx_time(0);
        sigma_natmx_time = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_natmx_time);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_natmx_time: ") + e.what());
        }

        if (!(context__.contains_r("sigma_natmx_age")))
            throw std::runtime_error("variable sigma_natmx_age missing");
        vals_r__ = context__.vals_r("sigma_natmx_age");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_natmx_age", "double", context__.to_vec());
        double sigma_natmx_age(0);
        sigma_natmx_age = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_natmx_age);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_natmx_age: ") + e.what());
        }

        if (!(context__.contains_r("sigma_art")))
            throw std::runtime_error("variable sigma_art missing");
        vals_r__ = context__.vals_r("sigma_art");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_art", "double", context__.to_vec());
        double sigma_art(0);
        sigma_art = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma_art);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma_art: ") + e.what());
        }

        if (!(context__.contains_r("hivsurv_shape")))
            throw std::runtime_error("variable hivsurv_shape missing");
        vals_r__ = context__.vals_r("hivsurv_shape");
        pos__ = 0U;
        context__.validate_dims("initialization", "hivsurv_shape", "double", context__.to_vec());
        double hivsurv_shape(0);
        hivsurv_shape = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,hivsurv_shape);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable hivsurv_shape: ") + e.what());
        }

        if (!(context__.contains_r("hivsurv_scale_b0_centered")))
            throw std::runtime_error("variable hivsurv_scale_b0_centered missing");
        vals_r__ = context__.vals_r("hivsurv_scale_b0_centered");
        pos__ = 0U;
        context__.validate_dims("initialization", "hivsurv_scale_b0_centered", "double", context__.to_vec());
        double hivsurv_scale_b0_centered(0);
        hivsurv_scale_b0_centered = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(hivsurv_scale_b0_centered);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable hivsurv_scale_b0_centered: ") + e.what());
        }

        if (!(context__.contains_r("hivsurv_scale_b1_centered")))
            throw std::runtime_error("variable hivsurv_scale_b1_centered missing");
        vals_r__ = context__.vals_r("hivsurv_scale_b1_centered");
        pos__ = 0U;
        context__.validate_dims("initialization", "hivsurv_scale_b1_centered", "double", context__.to_vec());
        double hivsurv_scale_b1_centered(0);
        hivsurv_scale_b1_centered = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(hivsurv_scale_b1_centered);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable hivsurv_scale_b1_centered: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  coef_incrate_time_age;
            (void) coef_incrate_time_age;  // dummy to suppress unused var warning
            if (jacobian__)
                coef_incrate_time_age = in__.matrix_constrain(nk_incrate_time,nk_incrate_age,lp__);
            else
                coef_incrate_time_age = in__.matrix_constrain(nk_incrate_time,nk_incrate_age);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  coef_natmx_time;
            (void) coef_natmx_time;  // dummy to suppress unused var warning
            if (jacobian__)
                coef_natmx_time = in__.vector_constrain(nk_natmx_time,lp__);
            else
                coef_natmx_time = in__.vector_constrain(nk_natmx_time);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  param_natmx_age;
            (void) param_natmx_age;  // dummy to suppress unused var warning
            if (jacobian__)
                param_natmx_age = in__.vector_constrain((nk_natmx_age - 1),lp__);
            else
                param_natmx_age = in__.vector_constrain((nk_natmx_age - 1));

            Eigen::Matrix<T__,Eigen::Dynamic,1>  dt_log_artrr;
            (void) dt_log_artrr;  // dummy to suppress unused var warning
            if (jacobian__)
                dt_log_artrr = in__.vector_ub_constrain(0,(STEPS_time - artstart_tIDX),lp__);
            else
                dt_log_artrr = in__.vector_ub_constrain(0,(STEPS_time - artstart_tIDX));

            T__ sigma_incrate_time_age;
            (void) sigma_incrate_time_age;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_incrate_time_age = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_incrate_time_age = in__.scalar_lb_constrain(0);

            T__ sigma_incrate_time;
            (void) sigma_incrate_time;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_incrate_time = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_incrate_time = in__.scalar_lb_constrain(0);

            T__ sigma_incrate_age;
            (void) sigma_incrate_age;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_incrate_age = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_incrate_age = in__.scalar_lb_constrain(0);

            T__ sigma_natmx_time;
            (void) sigma_natmx_time;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_natmx_time = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_natmx_time = in__.scalar_lb_constrain(0);

            T__ sigma_natmx_age;
            (void) sigma_natmx_age;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_natmx_age = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_natmx_age = in__.scalar_lb_constrain(0);

            T__ sigma_art;
            (void) sigma_art;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_art = in__.scalar_lb_constrain(0,lp__);
            else
                sigma_art = in__.scalar_lb_constrain(0);

            T__ hivsurv_shape;
            (void) hivsurv_shape;  // dummy to suppress unused var warning
            if (jacobian__)
                hivsurv_shape = in__.scalar_lb_constrain(0,lp__);
            else
                hivsurv_shape = in__.scalar_lb_constrain(0);

            T__ hivsurv_scale_b0_centered;
            (void) hivsurv_scale_b0_centered;  // dummy to suppress unused var warning
            if (jacobian__)
                hivsurv_scale_b0_centered = in__.scalar_constrain(lp__);
            else
                hivsurv_scale_b0_centered = in__.scalar_constrain();

            T__ hivsurv_scale_b1_centered;
            (void) hivsurv_scale_b1_centered;  // dummy to suppress unused var warning
            if (jacobian__)
                hivsurv_scale_b1_centered = in__.scalar_constrain(lp__);
            else
                hivsurv_scale_b1_centered = in__.scalar_constrain();


            // transformed parameters
            current_statement_begin__ = 718;
            validate_non_negative_index("coef_incrate_time", "nk_incrate_time", nk_incrate_time);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  coef_incrate_time(static_cast<Eigen::VectorXd::Index>(nk_incrate_time));
            (void) coef_incrate_time;  // dummy to suppress unused var warning

            stan::math::initialize(coef_incrate_time, DUMMY_VAR__);
            stan::math::fill(coef_incrate_time,DUMMY_VAR__);
            current_statement_begin__ = 719;
            validate_non_negative_index("coef_incrate_age", "nk_incrate_age", nk_incrate_age);
            Eigen::Matrix<T__,1,Eigen::Dynamic>  coef_incrate_age(static_cast<Eigen::VectorXd::Index>(nk_incrate_age));
            (void) coef_incrate_age;  // dummy to suppress unused var warning

            stan::math::initialize(coef_incrate_age, DUMMY_VAR__);
            stan::math::fill(coef_incrate_age,DUMMY_VAR__);
            current_statement_begin__ = 720;
            validate_non_negative_index("coef_natmx_age", "nk_natmx_age", nk_natmx_age);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  coef_natmx_age(static_cast<Eigen::VectorXd::Index>(nk_natmx_age));
            (void) coef_natmx_age;  // dummy to suppress unused var warning

            stan::math::initialize(coef_natmx_age, DUMMY_VAR__);
            stan::math::fill(coef_natmx_age,DUMMY_VAR__);
            current_statement_begin__ = 721;
            T__ hivsurv_scale_b0;
            (void) hivsurv_scale_b0;  // dummy to suppress unused var warning

            stan::math::initialize(hivsurv_scale_b0, DUMMY_VAR__);
            stan::math::fill(hivsurv_scale_b0,DUMMY_VAR__);
            current_statement_begin__ = 722;
            T__ hivsurv_scale_b1;
            (void) hivsurv_scale_b1;  // dummy to suppress unused var warning

            stan::math::initialize(hivsurv_scale_b1, DUMMY_VAR__);
            stan::math::fill(hivsurv_scale_b1,DUMMY_VAR__);


            current_statement_begin__ = 724;
            stan::math::assign(coef_incrate_time, row_means(coef_incrate_time_age, pstream__));
            current_statement_begin__ = 725;
            stan::math::assign(coef_incrate_age, col_means(coef_incrate_time_age, pstream__));
            current_statement_begin__ = 727;
            for (int i = 1; i <= nk_natmx_age; ++i) {
                current_statement_begin__ = 728;
                if (as_bool(logical_lt(i,fixcoef_natmx_age))) {

                    current_statement_begin__ = 729;
                    stan::math::assign(get_base1_lhs(coef_natmx_age,i,"coef_natmx_age",1), get_base1(param_natmx_age,i,"param_natmx_age",1));
                } else if (as_bool(logical_eq(i,fixcoef_natmx_age))) {

                    current_statement_begin__ = 731;
                    stan::math::assign(get_base1_lhs(coef_natmx_age,i,"coef_natmx_age",1), -(sum(param_natmx_age)));
                } else {

                    current_statement_begin__ = 733;
                    stan::math::assign(get_base1_lhs(coef_natmx_age,i,"coef_natmx_age",1), get_base1(param_natmx_age,(i - 1),"param_natmx_age",1));
                }
            }
            current_statement_begin__ = 737;
            stan::math::assign(hivsurv_scale_b0, ((0.25 * hivsurv_scale_b0_centered) + 2.5499999999999998));
            current_statement_begin__ = 738;
            stan::math::assign(hivsurv_scale_b1, ((0.050000000000000003 * hivsurv_scale_b1_centered) + -(0.20000000000000001)));

            // validate transformed parameters
            for (int i0__ = 0; i0__ < nk_incrate_time; ++i0__) {
                if (stan::math::is_uninitialized(coef_incrate_time(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: coef_incrate_time" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nk_incrate_age; ++i0__) {
                if (stan::math::is_uninitialized(coef_incrate_age(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: coef_incrate_age" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < nk_natmx_age; ++i0__) {
                if (stan::math::is_uninitialized(coef_natmx_age(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: coef_natmx_age" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            if (stan::math::is_uninitialized(hivsurv_scale_b0)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: hivsurv_scale_b0";
                throw std::runtime_error(msg__.str());
            }
            if (stan::math::is_uninitialized(hivsurv_scale_b1)) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: hivsurv_scale_b1";
                throw std::runtime_error(msg__.str());
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 718;
            current_statement_begin__ = 719;
            current_statement_begin__ = 720;
            current_statement_begin__ = 721;
            current_statement_begin__ = 722;

            // model body

            current_statement_begin__ = 746;
            lp_accum__.add(cauchy_log<propto__>(sigma_incrate_time_age, 0, 2.5));
            current_statement_begin__ = 747;
            lp_accum__.add(cauchy_log<propto__>(sigma_incrate_time, 0, 2.5));
            current_statement_begin__ = 748;
            lp_accum__.add(cauchy_log<propto__>(sigma_incrate_age, 0, 2.5));
            current_statement_begin__ = 749;
            lp_accum__.add(cauchy_log<propto__>(sigma_natmx_time, 0, 2.5));
            current_statement_begin__ = 750;
            lp_accum__.add(cauchy_log<propto__>(sigma_natmx_age, 0, 2.5));
            current_statement_begin__ = 751;
            lp_accum__.add(cauchy_log<propto__>(sigma_art, 0, 2.5));
            {
            current_statement_begin__ = 758;
            validate_non_negative_index("resid_incrate_time_age", "nk_incrate_time", nk_incrate_time);
            validate_non_negative_index("resid_incrate_time_age", "nk_incrate_age", nk_incrate_age);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  resid_incrate_time_age(static_cast<Eigen::VectorXd::Index>(nk_incrate_time),static_cast<Eigen::VectorXd::Index>(nk_incrate_age));
            (void) resid_incrate_time_age;  // dummy to suppress unused var warning

            stan::math::initialize(resid_incrate_time_age, DUMMY_VAR__);
            stan::math::fill(resid_incrate_time_age,DUMMY_VAR__);
            current_statement_begin__ = 759;
            validate_non_negative_index("vec_resid_incrate_time_age", "(nk_incrate_time * nk_incrate_age)", (nk_incrate_time * nk_incrate_age));
            Eigen::Matrix<T__,Eigen::Dynamic,1>  vec_resid_incrate_time_age(static_cast<Eigen::VectorXd::Index>((nk_incrate_time * nk_incrate_age)));
            (void) vec_resid_incrate_time_age;  // dummy to suppress unused var warning

            stan::math::initialize(vec_resid_incrate_time_age, DUMMY_VAR__);
            stan::math::fill(vec_resid_incrate_time_age,DUMMY_VAR__);


            current_statement_begin__ = 761;
            for (int j = 1; j <= nk_incrate_age; ++j) {
                current_statement_begin__ = 762;
                for (int i = 1; i <= nk_incrate_time; ++i) {
                    current_statement_begin__ = 763;
                    stan::math::assign(get_base1_lhs(resid_incrate_time_age,i,j,"resid_incrate_time_age",1), ((get_base1(coef_incrate_time_age,i,j,"coef_incrate_time_age",1) - get_base1(coef_incrate_time,i,"coef_incrate_time",1)) - get_base1(coef_incrate_age,j,"coef_incrate_age",1)));
                }
            }
            current_statement_begin__ = 765;
            stan::math::assign(vec_resid_incrate_time_age, to_vector(resid_incrate_time_age));
            current_statement_begin__ = 766;
            lp_accum__.add((((-((nk_incrate_time - 1)) * (nk_incrate_age - 1)) * log(sigma_incrate_time_age)) - ((1 / ((2 * sigma_incrate_time_age) * sigma_incrate_time_age)) * multiply(multiply(transpose(vec_resid_incrate_time_age),Pcar_prec_incrate),vec_resid_incrate_time_age))));
            current_statement_begin__ = 769;
            lp_accum__.add(normal_log<propto__>(multiply(D_incrate_time,coef_incrate_time), 0, sigma_incrate_time));
            current_statement_begin__ = 770;
            lp_accum__.add(normal_log<propto__>(multiply(D_incrate_age,to_vector(coef_incrate_age)), 0, sigma_incrate_age));
            current_statement_begin__ = 772;
            lp_accum__.add(normal_log<propto__>(multiply(D_natmx_time,coef_natmx_time), 0, sigma_natmx_time));
            current_statement_begin__ = 773;
            lp_accum__.add(normal_log<propto__>(multiply(D_natmx_age,coef_natmx_age), 0, sigma_natmx_age));
            current_statement_begin__ = 774;
            lp_accum__.add(normal_log<propto__>(multiply(D_art,dt_log_artrr), 0, sigma_art));
            }
            current_statement_begin__ = 782;
            lp_accum__.add(normal_log<propto__>(hivsurv_scale_b0_centered, 0, 1));
            current_statement_begin__ = 783;
            lp_accum__.add(normal_log<propto__>(hivsurv_scale_b1_centered, 0, 1));
            current_statement_begin__ = 786;
            lp_accum__.add(gamma_log<propto__>(hivsurv_shape, 12.0, 6.0));
            {
            current_statement_begin__ = 793;
            validate_non_negative_index("incrateMID_time_age", "(STEPS_time - 1)", (STEPS_time - 1));
            validate_non_negative_index("incrateMID_time_age", "(STEPS_age - 1)", (STEPS_age - 1));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  incrateMID_time_age(static_cast<Eigen::VectorXd::Index>((STEPS_time - 1)),static_cast<Eigen::VectorXd::Index>((STEPS_age - 1)));
            (void) incrateMID_time_age;  // dummy to suppress unused var warning

            stan::math::initialize(incrateMID_time_age, DUMMY_VAR__);
            stan::math::fill(incrateMID_time_age,DUMMY_VAR__);
            current_statement_begin__ = 794;
            validate_non_negative_index("cumavoid_time_age", "STEPS_time", STEPS_time);
            validate_non_negative_index("cumavoid_time_age", "STEPS_age", STEPS_age);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  cumavoid_time_age(static_cast<Eigen::VectorXd::Index>(STEPS_time),static_cast<Eigen::VectorXd::Index>(STEPS_age));
            (void) cumavoid_time_age;  // dummy to suppress unused var warning

            stan::math::initialize(cumavoid_time_age, DUMMY_VAR__);
            stan::math::fill(cumavoid_time_age,DUMMY_VAR__);
            current_statement_begin__ = 795;
            validate_non_negative_index("cumavoidMID_time_age", "(STEPS_time - 1)", (STEPS_time - 1));
            validate_non_negative_index("cumavoidMID_time_age", "(STEPS_age - 1)", (STEPS_age - 1));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  cumavoidMID_time_age(static_cast<Eigen::VectorXd::Index>((STEPS_time - 1)),static_cast<Eigen::VectorXd::Index>((STEPS_age - 1)));
            (void) cumavoidMID_time_age;  // dummy to suppress unused var warning

            stan::math::initialize(cumavoidMID_time_age, DUMMY_VAR__);
            stan::math::fill(cumavoidMID_time_age,DUMMY_VAR__);
            current_statement_begin__ = 796;
            validate_non_negative_index("natmx_time_age", "STEPS_time", STEPS_time);
            validate_non_negative_index("natmx_time_age", "STEPS_age", STEPS_age);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  natmx_time_age(static_cast<Eigen::VectorXd::Index>(STEPS_time),static_cast<Eigen::VectorXd::Index>(STEPS_age));
            (void) natmx_time_age;  // dummy to suppress unused var warning

            stan::math::initialize(natmx_time_age, DUMMY_VAR__);
            stan::math::fill(natmx_time_age,DUMMY_VAR__);
            current_statement_begin__ = 797;
            validate_non_negative_index("natsurv_time_age", "STEPS_time", STEPS_time);
            validate_non_negative_index("natsurv_time_age", "STEPS_age", STEPS_age);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  natsurv_time_age(static_cast<Eigen::VectorXd::Index>(STEPS_time),static_cast<Eigen::VectorXd::Index>(STEPS_age));
            (void) natsurv_time_age;  // dummy to suppress unused var warning

            stan::math::initialize(natsurv_time_age, DUMMY_VAR__);
            stan::math::fill(natsurv_time_age,DUMMY_VAR__);
            current_statement_begin__ = 798;
            validate_non_negative_index("artrr", "STEPS_time", STEPS_time);
            Eigen::Matrix<T__,Eigen::Dynamic,1>  artrr(static_cast<Eigen::VectorXd::Index>(STEPS_time));
            (void) artrr;  // dummy to suppress unused var warning

            stan::math::initialize(artrr, DUMMY_VAR__);
            stan::math::fill(artrr,DUMMY_VAR__);
            current_statement_begin__ = 799;
            validate_non_negative_index("artrr_MID", "(STEPS_time - 1)", (STEPS_time - 1));
            Eigen::Matrix<T__,Eigen::Dynamic,1>  artrr_MID(static_cast<Eigen::VectorXd::Index>((STEPS_time - 1)));
            (void) artrr_MID;  // dummy to suppress unused var warning

            stan::math::initialize(artrr_MID, DUMMY_VAR__);
            stan::math::fill(artrr_MID,DUMMY_VAR__);
            current_statement_begin__ = 802;
            validate_non_negative_index("hivsurv_scale_a0", "(STEPS_age - 1)", (STEPS_age - 1));
            Eigen::Matrix<T__,Eigen::Dynamic,1>  hivsurv_scale_a0(static_cast<Eigen::VectorXd::Index>((STEPS_age - 1)));
            (void) hivsurv_scale_a0;  // dummy to suppress unused var warning

            stan::math::initialize(hivsurv_scale_a0, DUMMY_VAR__);
            stan::math::fill(hivsurv_scale_a0,DUMMY_VAR__);
            current_statement_begin__ = 804;
            validate_non_negative_index("hivmx_dur_a0", "(STEPS_time - 1)", (STEPS_time - 1));
            validate_non_negative_index("hivmx_dur_a0", "(STEPS_age - 1)", (STEPS_age - 1));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  hivmx_dur_a0(static_cast<Eigen::VectorXd::Index>((STEPS_time - 1)),static_cast<Eigen::VectorXd::Index>((STEPS_age - 1)));
            (void) hivmx_dur_a0;  // dummy to suppress unused var warning

            stan::math::initialize(hivmx_dur_a0, DUMMY_VAR__);
            stan::math::fill(hivmx_dur_a0,DUMMY_VAR__);
            current_statement_begin__ = 805;
            validate_non_negative_index("hivsurv_dur_a0", "(STEPS_time - 1)", (STEPS_time - 1));
            validate_non_negative_index("hivsurv_dur_a0", "(STEPS_age - 1)", (STEPS_age - 1));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  hivsurv_dur_a0(static_cast<Eigen::VectorXd::Index>((STEPS_time - 1)),static_cast<Eigen::VectorXd::Index>((STEPS_age - 1)));
            (void) hivsurv_dur_a0;  // dummy to suppress unused var warning

            stan::math::initialize(hivsurv_dur_a0, DUMMY_VAR__);
            stan::math::fill(hivsurv_dur_a0,DUMMY_VAR__);
            current_statement_begin__ = 806;
            validate_non_negative_index("hivmxMID_dur_a0", "(STEPS_time - 1)", (STEPS_time - 1));
            validate_non_negative_index("hivmxMID_dur_a0", "(STEPS_age - 1)", (STEPS_age - 1));
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  hivmxMID_dur_a0(static_cast<Eigen::VectorXd::Index>((STEPS_time - 1)),static_cast<Eigen::VectorXd::Index>((STEPS_age - 1)));
            (void) hivmxMID_dur_a0;  // dummy to suppress unused var warning

            stan::math::initialize(hivmxMID_dur_a0, DUMMY_VAR__);
            stan::math::fill(hivmxMID_dur_a0,DUMMY_VAR__);


            current_statement_begin__ = 808;
            stan::math::assign(incrateMID_time_age, exp(multiply(multiply(Xmid_incrate_time,coef_incrate_time_age),transpose(Xmid_incrate_age))));
            current_statement_begin__ = 809;
            stan::math::assign(cumavoid_time_age, exp(multiply(-(dt),diagCumSum(incrateMID_time_age, pstream__))));
            current_statement_begin__ = 810;
            stan::math::assign(cumavoidMID_time_age, elt_multiply(block(cumavoid_time_age,1,1,(STEPS_time - 1),(STEPS_age - 1)),exp(multiply((-(dt) / 2),incrateMID_time_age))));
            current_statement_begin__ = 812;
            stan::math::assign(natmx_time_age, multiply(exp(multiply(X_natmx_time,coef_natmx_time)),transpose(exp(multiply(X_natmx_age,coef_natmx_age)))));
            current_statement_begin__ = 813;
            stan::math::assign(natsurv_time_age, exp(multiply(-(dt),diagCumSum(multiply(exp(multiply(Xmid_natmx_time,coef_natmx_time)),transpose(exp(multiply(Xmid_natmx_age,coef_natmx_age)))), pstream__))));
            current_statement_begin__ = 815;
            stan::math::assign(hivsurv_scale_a0, exp(add(hivsurv_scale_b0,multiply(X_hivsurv_age,hivsurv_scale_b1))));
            current_statement_begin__ = 817;
            stan::math::assign(hivmx_dur_a0, create_hivmx_dur_a0(hivsurv_shape,hivsurv_scale_a0,(STEPS_time - 1),dt, pstream__));
            current_statement_begin__ = 818;
            stan::math::assign(hivsurv_dur_a0, create_log_hivsurv_dur_a0(hivsurv_shape,hivsurv_scale_a0,(STEPS_time - 1),dt, pstream__));
            current_statement_begin__ = 819;
            stan::math::assign(hivmxMID_dur_a0, diff_hivmxMID_dur_a0(hivsurv_dur_a0,dt, pstream__));
            current_statement_begin__ = 820;
            stan::math::assign(hivsurv_dur_a0, exp(hivsurv_dur_a0));
            {
            current_statement_begin__ = 823;
            validate_non_negative_index("log_artrr", "(STEPS_time - artstart_tIDX)", (STEPS_time - artstart_tIDX));
            Eigen::Matrix<T__,Eigen::Dynamic,1>  log_artrr(static_cast<Eigen::VectorXd::Index>((STEPS_time - artstart_tIDX)));
            (void) log_artrr;  // dummy to suppress unused var warning

            stan::math::initialize(log_artrr, DUMMY_VAR__);
            stan::math::fill(log_artrr,DUMMY_VAR__);


            current_statement_begin__ = 824;
            stan::math::assign(log_artrr, multiply(dt,cumulative_sum(dt_log_artrr)));
            current_statement_begin__ = 826;
            for (int i = 1; i <= (STEPS_time - artstart_tIDX); ++i) {

                current_statement_begin__ = 827;
                stan::math::assign(get_base1_lhs(artrr,(artstart_tIDX + i),"artrr",1), exp(get_base1(log_artrr,i,"log_artrr",1)));
                current_statement_begin__ = 828;
                stan::math::assign(get_base1_lhs(artrr_MID,((artstart_tIDX + i) - 1),"artrr_MID",1), exp((get_base1(log_artrr,i,"log_artrr",1) - ((dt / 2) * get_base1(dt_log_artrr,i,"dt_log_artrr",1)))));
            }
            }
            current_statement_begin__ = 836;
            lp_accum__.add(calc_ll_cohexit(coh_cIDX,coh_minexpose_tIDX,coh_maxexpose_tIDX,coh_nexit,exdat_tIDX,exdat_minexpose_tIDX,exdat_maxexpose_tIDX,exdat_ndat,aggr_exposestart_tIDX,aggr_exposeend_tIDX,aggr_death,aggr_deathinterv,aggr_deathinterv_DUR,aggr_hivpos,aggr_nrepl,cumavoid_time_age,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("coef_incrate_time_age");
        names__.push_back("coef_natmx_time");
        names__.push_back("param_natmx_age");
        names__.push_back("dt_log_artrr");
        names__.push_back("sigma_incrate_time_age");
        names__.push_back("sigma_incrate_time");
        names__.push_back("sigma_incrate_age");
        names__.push_back("sigma_natmx_time");
        names__.push_back("sigma_natmx_age");
        names__.push_back("sigma_art");
        names__.push_back("hivsurv_shape");
        names__.push_back("hivsurv_scale_b0_centered");
        names__.push_back("hivsurv_scale_b1_centered");
        names__.push_back("coef_incrate_time");
        names__.push_back("coef_incrate_age");
        names__.push_back("coef_natmx_age");
        names__.push_back("hivsurv_scale_b0");
        names__.push_back("hivsurv_scale_b1");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(nk_incrate_time);
        dims__.push_back(nk_incrate_age);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nk_natmx_time);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((nk_natmx_age - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((STEPS_time - artstart_tIDX));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nk_incrate_time);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nk_incrate_age);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(nk_natmx_age);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_le_interact_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        matrix_d coef_incrate_time_age = in__.matrix_constrain(nk_incrate_time,nk_incrate_age);
        vector_d coef_natmx_time = in__.vector_constrain(nk_natmx_time);
        vector_d param_natmx_age = in__.vector_constrain((nk_natmx_age - 1));
        vector_d dt_log_artrr = in__.vector_ub_constrain(0,(STEPS_time - artstart_tIDX));
        double sigma_incrate_time_age = in__.scalar_lb_constrain(0);
        double sigma_incrate_time = in__.scalar_lb_constrain(0);
        double sigma_incrate_age = in__.scalar_lb_constrain(0);
        double sigma_natmx_time = in__.scalar_lb_constrain(0);
        double sigma_natmx_age = in__.scalar_lb_constrain(0);
        double sigma_art = in__.scalar_lb_constrain(0);
        double hivsurv_shape = in__.scalar_lb_constrain(0);
        double hivsurv_scale_b0_centered = in__.scalar_constrain();
        double hivsurv_scale_b1_centered = in__.scalar_constrain();
            for (int k_1__ = 0; k_1__ < nk_incrate_age; ++k_1__) {
                for (int k_0__ = 0; k_0__ < nk_incrate_time; ++k_0__) {
                vars__.push_back(coef_incrate_time_age(k_0__, k_1__));
                }
            }
            for (int k_0__ = 0; k_0__ < nk_natmx_time; ++k_0__) {
            vars__.push_back(coef_natmx_time[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (nk_natmx_age - 1); ++k_0__) {
            vars__.push_back(param_natmx_age[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < (STEPS_time - artstart_tIDX); ++k_0__) {
            vars__.push_back(dt_log_artrr[k_0__]);
            }
        vars__.push_back(sigma_incrate_time_age);
        vars__.push_back(sigma_incrate_time);
        vars__.push_back(sigma_incrate_age);
        vars__.push_back(sigma_natmx_time);
        vars__.push_back(sigma_natmx_age);
        vars__.push_back(sigma_art);
        vars__.push_back(hivsurv_shape);
        vars__.push_back(hivsurv_scale_b0_centered);
        vars__.push_back(hivsurv_scale_b1_centered);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 718;
            validate_non_negative_index("coef_incrate_time", "nk_incrate_time", nk_incrate_time);
            vector_d coef_incrate_time(static_cast<Eigen::VectorXd::Index>(nk_incrate_time));
            (void) coef_incrate_time;  // dummy to suppress unused var warning

            stan::math::initialize(coef_incrate_time, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(coef_incrate_time,DUMMY_VAR__);
            current_statement_begin__ = 719;
            validate_non_negative_index("coef_incrate_age", "nk_incrate_age", nk_incrate_age);
            row_vector_d coef_incrate_age(static_cast<Eigen::VectorXd::Index>(nk_incrate_age));
            (void) coef_incrate_age;  // dummy to suppress unused var warning

            stan::math::initialize(coef_incrate_age, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(coef_incrate_age,DUMMY_VAR__);
            current_statement_begin__ = 720;
            validate_non_negative_index("coef_natmx_age", "nk_natmx_age", nk_natmx_age);
            vector_d coef_natmx_age(static_cast<Eigen::VectorXd::Index>(nk_natmx_age));
            (void) coef_natmx_age;  // dummy to suppress unused var warning

            stan::math::initialize(coef_natmx_age, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(coef_natmx_age,DUMMY_VAR__);
            current_statement_begin__ = 721;
            double hivsurv_scale_b0(0.0);
            (void) hivsurv_scale_b0;  // dummy to suppress unused var warning

            stan::math::initialize(hivsurv_scale_b0, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(hivsurv_scale_b0,DUMMY_VAR__);
            current_statement_begin__ = 722;
            double hivsurv_scale_b1(0.0);
            (void) hivsurv_scale_b1;  // dummy to suppress unused var warning

            stan::math::initialize(hivsurv_scale_b1, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(hivsurv_scale_b1,DUMMY_VAR__);


            current_statement_begin__ = 724;
            stan::math::assign(coef_incrate_time, row_means(coef_incrate_time_age, pstream__));
            current_statement_begin__ = 725;
            stan::math::assign(coef_incrate_age, col_means(coef_incrate_time_age, pstream__));
            current_statement_begin__ = 727;
            for (int i = 1; i <= nk_natmx_age; ++i) {
                current_statement_begin__ = 728;
                if (as_bool(logical_lt(i,fixcoef_natmx_age))) {

                    current_statement_begin__ = 729;
                    stan::math::assign(get_base1_lhs(coef_natmx_age,i,"coef_natmx_age",1), get_base1(param_natmx_age,i,"param_natmx_age",1));
                } else if (as_bool(logical_eq(i,fixcoef_natmx_age))) {

                    current_statement_begin__ = 731;
                    stan::math::assign(get_base1_lhs(coef_natmx_age,i,"coef_natmx_age",1), -(sum(param_natmx_age)));
                } else {

                    current_statement_begin__ = 733;
                    stan::math::assign(get_base1_lhs(coef_natmx_age,i,"coef_natmx_age",1), get_base1(param_natmx_age,(i - 1),"param_natmx_age",1));
                }
            }
            current_statement_begin__ = 737;
            stan::math::assign(hivsurv_scale_b0, ((0.25 * hivsurv_scale_b0_centered) + 2.5499999999999998));
            current_statement_begin__ = 738;
            stan::math::assign(hivsurv_scale_b1, ((0.050000000000000003 * hivsurv_scale_b1_centered) + -(0.20000000000000001)));

            // validate transformed parameters
            current_statement_begin__ = 718;
            current_statement_begin__ = 719;
            current_statement_begin__ = 720;
            current_statement_begin__ = 721;
            current_statement_begin__ = 722;

            // write transformed parameters
            for (int k_0__ = 0; k_0__ < nk_incrate_time; ++k_0__) {
            vars__.push_back(coef_incrate_time[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nk_incrate_age; ++k_0__) {
            vars__.push_back(coef_incrate_age[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < nk_natmx_age; ++k_0__) {
            vars__.push_back(coef_natmx_age[k_0__]);
            }
        vars__.push_back(hivsurv_scale_b0);
        vars__.push_back(hivsurv_scale_b1);

            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_le_interact";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= nk_incrate_age; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nk_incrate_time; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "coef_incrate_time_age" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nk_natmx_time; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef_natmx_time" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (nk_natmx_age - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "param_natmx_age" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (STEPS_time - artstart_tIDX); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dt_log_artrr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_incrate_time_age";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_incrate_time";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_incrate_age";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_natmx_time";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_natmx_age";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_art";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "hivsurv_shape";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "hivsurv_scale_b0_centered";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "hivsurv_scale_b1_centered";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= nk_incrate_time; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef_incrate_time" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nk_incrate_age; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef_incrate_age" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nk_natmx_age; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef_natmx_age" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "hivsurv_scale_b0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "hivsurv_scale_b1";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_1__ = 1; k_1__ <= nk_incrate_age; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= nk_incrate_time; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "coef_incrate_time_age" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_0__ = 1; k_0__ <= nk_natmx_time; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef_natmx_time" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (nk_natmx_age - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "param_natmx_age" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= (STEPS_time - artstart_tIDX); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "dt_log_artrr" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_incrate_time_age";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_incrate_time";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_incrate_age";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_natmx_time";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_natmx_age";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_art";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "hivsurv_shape";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "hivsurv_scale_b0_centered";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "hivsurv_scale_b1_centered";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= nk_incrate_time; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef_incrate_time" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nk_incrate_age; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef_incrate_age" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= nk_natmx_age; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "coef_natmx_age" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "hivsurv_scale_b0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "hivsurv_scale_b1";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
    }

}; // model

}

typedef model_le_interact_namespace::model_le_interact stan_model;


#endif
