/*
    alphaepi is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    alphaepi is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with alphaepi.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace model_functions_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_functions");
    reader.add_event(1, 1, "include", "/chunks/le_functions.stan");
    reader.add_event(1, 0, "start", "/chunks/le_functions.stan");
    reader.add_event(601, 600, "end", "/chunks/le_functions.stan");
    reader.add_event(601, 2, "restart", "model_functions");
    reader.add_event(605, 4, "end", "model_functions");
    return reader;
}

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
log_inv_logit_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 4;
        validate_non_negative_index("val", "rows(x)", rows(x));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  val(static_cast<Eigen::VectorXd::Index>(rows(x)));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, DUMMY_VAR__);
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 6;
        for (int i = 1; i <= rows(x); ++i) {
            current_statement_begin__ = 7;
            stan::model::assign(val, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        log_inv_logit(get_base1(x,i,"x",1)), 
                        "assigning variable val");
        }
        current_statement_begin__ = 9;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_inv_logit_vec_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
        return log_inv_logit_vec(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
inv_logit_vec(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 14;
        validate_non_negative_index("val", "rows(x)", rows(x));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  val(static_cast<Eigen::VectorXd::Index>(rows(x)));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, DUMMY_VAR__);
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 16;
        for (int i = 1; i <= rows(x); ++i) {
            current_statement_begin__ = 17;
            stan::model::assign(val, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        inv_logit(get_base1(x,i,"x",1)), 
                        "assigning variable val");
        }
        current_statement_begin__ = 19;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct inv_logit_vec_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& x, std::ostream* pstream__) const {
        return inv_logit_vec(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
diagCumSum(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& x, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 24;
        validate_non_negative_index("val", "(rows(x) + 1)", (rows(x) + 1));
        validate_non_negative_index("val", "(cols(x) + 1)", (cols(x) + 1));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  val(static_cast<Eigen::VectorXd::Index>((rows(x) + 1)),static_cast<Eigen::VectorXd::Index>((cols(x) + 1)));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, DUMMY_VAR__);
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 26;
        for (int i = 1; i <= rows(val); ++i) {
            current_statement_begin__ = 27;
            stan::model::assign(val, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable val");
        }
        current_statement_begin__ = 28;
        for (int j = 2; j <= cols(val); ++j) {

            current_statement_begin__ = 29;
            stan::model::assign(val, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                        0, 
                        "assigning variable val");
            current_statement_begin__ = 30;
            for (int i = 2; i <= rows(val); ++i) {
                current_statement_begin__ = 31;
                stan::model::assign(val, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            stan::model::deep_copy((get_base1(val,(i - 1),(j - 1),"val",1) + get_base1(x,(i - 1),(j - 1),"x",1))), 
                            "assigning variable val");
            }
        }
        current_statement_begin__ = 34;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct diagCumSum_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& x, std::ostream* pstream__) const {
        return diagCumSum(x, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1,Eigen::Dynamic>
col_means(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 38;
        validate_non_negative_index("val", "cols(X)", cols(X));
        Eigen::Matrix<local_scalar_t__,1,Eigen::Dynamic>  val(static_cast<Eigen::VectorXd::Index>(cols(X)));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, DUMMY_VAR__);
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 39;
        stan::math::assign(val, multiply(rep_row_vector((1.0 / rows(X)),rows(X)),X));
        current_statement_begin__ = 40;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct col_means_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, 1,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X, std::ostream* pstream__) const {
        return col_means(X, pstream__);
    }
};

template <typename T0__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
row_means(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 44;
        validate_non_negative_index("val", "rows(X)", rows(X));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  val(static_cast<Eigen::VectorXd::Index>(rows(X)));
        (void) val;  // dummy to suppress unused var warning

        stan::math::initialize(val, DUMMY_VAR__);
        stan::math::fill(val,DUMMY_VAR__);


        current_statement_begin__ = 45;
        stan::math::assign(val, multiply(X,rep_vector((1.0 / cols(X)),cols(X))));
        current_statement_begin__ = 46;
        return stan::math::promote_scalar<fun_return_scalar_t__>(val);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct row_means_functor__ {
    template <typename T0__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X, std::ostream* pstream__) const {
        return row_means(X, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weibull_hazard(const T0__& y,
                   const T1__& alpha,
                   const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        current_statement_begin__ = 50;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((alpha / sigma) * pow((y / sigma),(alpha - 1))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct weibull_hazard_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& y,
                   const T1__& alpha,
                   const T2__& sigma, std::ostream* pstream__) const {
        return weibull_hazard(y, alpha, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
create_hivmx_dur_a0(const T0__& shape,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& scale_a0,
                        const int& steps_dur,
                        const T3__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 60;
        validate_non_negative_index("y", "steps_dur", steps_dur);
        validate_non_negative_index("y", "rows(scale_a0)", rows(scale_a0));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  y(static_cast<Eigen::VectorXd::Index>(steps_dur),static_cast<Eigen::VectorXd::Index>(rows(scale_a0)));
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y,DUMMY_VAR__);


        current_statement_begin__ = 61;
        for (int j = 1; j <= rows(scale_a0); ++j) {

            current_statement_begin__ = 62;
            for (int i = 1; i <= steps_dur; ++i) {
                current_statement_begin__ = 63;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            weibull_hazard(((i * dt) - (dt / 2)),shape,get_base1(scale_a0,j,"scale_a0",1), pstream__), 
                            "assigning variable y");
            }
        }
        current_statement_begin__ = 65;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct create_hivmx_dur_a0_functor__ {
    template <typename T0__, typename T1__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const T0__& shape,
                        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& scale_a0,
                        const int& steps_dur,
                        const T3__& dt, std::ostream* pstream__) const {
        return create_hivmx_dur_a0(shape, scale_a0, steps_dur, dt, pstream__);
    }
};

template <typename T0__, typename T1__, typename T3__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
create_log_hivsurv_dur_a0(const T0__& shape,
                              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& scale_a0,
                              const int& steps_dur,
                              const T3__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T3__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 69;
        validate_non_negative_index("y", "steps_dur", steps_dur);
        validate_non_negative_index("y", "rows(scale_a0)", rows(scale_a0));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  y(static_cast<Eigen::VectorXd::Index>(steps_dur),static_cast<Eigen::VectorXd::Index>(rows(scale_a0)));
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y,DUMMY_VAR__);


        current_statement_begin__ = 70;
        for (int j = 1; j <= rows(scale_a0); ++j) {

            current_statement_begin__ = 71;
            for (int i = 1; i <= steps_dur; ++i) {
                current_statement_begin__ = 72;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            weibull_ccdf_log(((i * dt) - (dt / 2)),shape,get_base1(scale_a0,j,"scale_a0",1)), 
                            "assigning variable y");
            }
        }
        current_statement_begin__ = 74;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct create_log_hivsurv_dur_a0_functor__ {
    template <typename T0__, typename T1__, typename T3__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T3__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const T0__& shape,
                              const Eigen::Matrix<T1__, Eigen::Dynamic,1>& scale_a0,
                              const int& steps_dur,
                              const T3__& dt, std::ostream* pstream__) const {
        return create_log_hivsurv_dur_a0(shape, scale_a0, steps_dur, dt, pstream__);
    }
};

template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
diff_hivmxMID_dur_a0(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& x,
                         const T1__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 78;
        validate_non_negative_index("y", "rows(x)", rows(x));
        validate_non_negative_index("y", "cols(x)", cols(x));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  y(static_cast<Eigen::VectorXd::Index>(rows(x)),static_cast<Eigen::VectorXd::Index>(cols(x)));
        (void) y;  // dummy to suppress unused var warning

        stan::math::initialize(y, DUMMY_VAR__);
        stan::math::fill(y,DUMMY_VAR__);


        current_statement_begin__ = 79;
        stan::model::assign(y, 
                    stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), 
                    stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"), 
                    "assigning variable y");
        current_statement_begin__ = 80;
        for (int j = 1; j <= cols(x); ++j) {
            current_statement_begin__ = 81;
            for (int i = 2; i <= rows(x); ++i) {
                current_statement_begin__ = 82;
                stan::model::assign(y, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                            (get_base1(x,i,j,"x",1) - get_base1(x,(i - 1),j,"x",1)), 
                            "assigning variable y");
            }
        }
        current_statement_begin__ = 83;
        stan::math::assign(y, stan::model::deep_copy(divide(minus(y),dt)));
        current_statement_begin__ = 84;
        return stan::math::promote_scalar<fun_return_scalar_t__>(y);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct diff_hivmxMID_dur_a0_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& x,
                         const T1__& dt, std::ostream* pstream__) const {
        return diff_hivmxMID_dur_a0(x, dt, pstream__);
    }
};

template <typename T4__, typename T5__, typename T6__, typename T8__>
Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__, T6__, T8__>::type, Eigen::Dynamic,1>
calc_phivsurv(const int& tIDX,
                  const int& aIDX,
                  const int& exposeDUR,
                  const int& exit_tIDX,
                  const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                  const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                  const Eigen::Matrix<T6__, Eigen::Dynamic,1>& artrr_MID,
                  const int& artstart_tIDX,
                  const T8__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T4__, T5__, T6__, T8__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 94;
        validate_non_negative_index("phivsurv", "exposeDUR", exposeDUR);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  phivsurv(static_cast<Eigen::VectorXd::Index>(exposeDUR));
        (void) phivsurv;  // dummy to suppress unused var warning

        stan::math::initialize(phivsurv, DUMMY_VAR__);
        stan::math::fill(phivsurv,DUMMY_VAR__);


        current_statement_begin__ = 96;
        if (as_bool(logical_gt(exit_tIDX,artstart_tIDX))) {
            {
            current_statement_begin__ = 98;
            int i_tIDX(0);
            (void) i_tIDX;  // dummy to suppress unused var warning

            stan::math::fill(i_tIDX, std::numeric_limits<int>::min());
            current_statement_begin__ = 99;
            int i_aIDX(0);
            (void) i_aIDX;  // dummy to suppress unused var warning

            stan::math::fill(i_aIDX, std::numeric_limits<int>::min());


            current_statement_begin__ = 101;
            for (int ii = 1; ii <= exposeDUR; ++ii) {

                current_statement_begin__ = 102;
                stan::math::assign(i_tIDX, ((tIDX + ii) - 1));
                current_statement_begin__ = 103;
                stan::math::assign(i_aIDX, ((aIDX + ii) - 1));
                current_statement_begin__ = 105;
                if (as_bool(logical_lt(i_tIDX,artstart_tIDX))) {
                    current_statement_begin__ = 106;
                    stan::model::assign(phivsurv, 
                                stan::model::cons_list(stan::model::index_uni(ii), stan::model::nil_index_list()), 
                                (get_base1(hivsurv_dur_a0,(artstart_tIDX - i_tIDX),i_aIDX,"hivsurv_dur_a0",1) * stan::math::exp((-(dt) * dot_product(sub_col(hivmxMID_dur_a0,((artstart_tIDX - i_tIDX) + 1),i_aIDX,(exit_tIDX - artstart_tIDX)),segment(artrr_MID,artstart_tIDX,(exit_tIDX - artstart_tIDX)))))), 
                                "assigning variable phivsurv");
                } else {
                    current_statement_begin__ = 110;
                    stan::model::assign(phivsurv, 
                                stan::model::cons_list(stan::model::index_uni(ii), stan::model::nil_index_list()), 
                                stan::math::exp((-(dt) * dot_product(sub_col(hivmxMID_dur_a0,1,i_aIDX,(exit_tIDX - i_tIDX)),segment(artrr_MID,i_tIDX,(exit_tIDX - i_tIDX))))), 
                                "assigning variable phivsurv");
                }
            }
            }
        } else {
            {
            current_statement_begin__ = 113;
            int taoIDX(0);
            (void) taoIDX;  // dummy to suppress unused var warning

            stan::math::fill(taoIDX, std::numeric_limits<int>::min());


            current_statement_begin__ = 114;
            stan::math::assign(taoIDX, ((exit_tIDX - tIDX) + 1));
            current_statement_begin__ = 115;
            for (int ii = 1; ii <= exposeDUR; ++ii) {
                current_statement_begin__ = 116;
                stan::model::assign(phivsurv, 
                            stan::model::cons_list(stan::model::index_uni(ii), stan::model::nil_index_list()), 
                            get_base1(hivsurv_dur_a0,(taoIDX - ii),((aIDX + ii) - 1),"hivsurv_dur_a0",1), 
                            "assigning variable phivsurv");
            }
            }
        }
        current_statement_begin__ = 119;
        return stan::math::promote_scalar<fun_return_scalar_t__>(phivsurv);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_phivsurv_functor__ {
    template <typename T4__, typename T5__, typename T6__, typename T8__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__, T6__, T8__>::type, Eigen::Dynamic,1>
    operator()(const int& tIDX,
                  const int& aIDX,
                  const int& exposeDUR,
                  const int& exit_tIDX,
                  const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                  const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                  const Eigen::Matrix<T6__, Eigen::Dynamic,1>& artrr_MID,
                  const int& artstart_tIDX,
                  const T8__& dt, std::ostream* pstream__) const {
        return calc_phivsurv(tIDX, aIDX, exposeDUR, exit_tIDX, hivsurv_dur_a0, hivmxMID_dur_a0, artrr_MID, artstart_tIDX, dt, pstream__);
    }
};

template <typename T4__, typename T5__>
Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__>::type, Eigen::Dynamic,1>
calc_hivmx(const int& tIDX,
               const int& aIDX,
               const int& exposeDUR,
               const int& exit_tIDX,
               const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
               const Eigen::Matrix<T5__, Eigen::Dynamic,1>& artrr,
               const int& artstart_tIDX, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T4__, T5__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 124;
        int taoIDX(0);
        (void) taoIDX;  // dummy to suppress unused var warning

        stan::math::fill(taoIDX, std::numeric_limits<int>::min());
        current_statement_begin__ = 125;
        validate_non_negative_index("hivmx", "exposeDUR", exposeDUR);
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hivmx(static_cast<Eigen::VectorXd::Index>(exposeDUR));
        (void) hivmx;  // dummy to suppress unused var warning

        stan::math::initialize(hivmx, DUMMY_VAR__);
        stan::math::fill(hivmx,DUMMY_VAR__);


        current_statement_begin__ = 127;
        stan::math::assign(taoIDX, ((exit_tIDX - tIDX) + 1));
        current_statement_begin__ = 129;
        for (int ii = 1; ii <= exposeDUR; ++ii) {
            current_statement_begin__ = 130;
            stan::model::assign(hivmx, 
                        stan::model::cons_list(stan::model::index_uni(ii), stan::model::nil_index_list()), 
                        get_base1(hivmx_dur_a0,(taoIDX - ii),((aIDX + ii) - 1),"hivmx_dur_a0",1), 
                        "assigning variable hivmx");
        }
        current_statement_begin__ = 132;
        if (as_bool(logical_gt(exit_tIDX,artstart_tIDX))) {
            current_statement_begin__ = 133;
            stan::math::assign(hivmx, stan::model::deep_copy(multiply(hivmx,get_base1(artrr,exit_tIDX,"artrr",1))));
        }
        current_statement_begin__ = 135;
        return stan::math::promote_scalar<fun_return_scalar_t__>(hivmx);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_hivmx_functor__ {
    template <typename T4__, typename T5__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T4__, T5__>::type, Eigen::Dynamic,1>
    operator()(const int& tIDX,
               const int& aIDX,
               const int& exposeDUR,
               const int& exit_tIDX,
               const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
               const Eigen::Matrix<T5__, Eigen::Dynamic,1>& artrr,
               const int& artstart_tIDX, std::ostream* pstream__) const {
        return calc_hivmx(tIDX, aIDX, exposeDUR, exit_tIDX, hivmx_dur_a0, artrr, artstart_tIDX, pstream__);
    }
};

template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T9__, typename T10__>
typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T9__, T10__>::type>::type
calc_log_psurventry(const int& entry_tIDX,
                        const int& entry_aIDX,
                        const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                        const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                        const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                        const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                        const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                        const Eigen::Matrix<T7__, Eigen::Dynamic,1>& artrr_MID,
                        const int& artstart_tIDX,
                        const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                        const T10__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T9__, T10__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 152;
        local_scalar_t__ log_psurventry;
        (void) log_psurventry;  // dummy to suppress unused var warning

        stan::math::initialize(log_psurventry, DUMMY_VAR__);
        stan::math::fill(log_psurventry,DUMMY_VAR__);
        current_statement_begin__ = 153;
        int expose_DUR(0);
        (void) expose_DUR;  // dummy to suppress unused var warning

        stan::math::fill(expose_DUR, std::numeric_limits<int>::min());
        current_statement_begin__ = 154;
        int expose_tIDX(0);
        (void) expose_tIDX;  // dummy to suppress unused var warning

        stan::math::fill(expose_tIDX, std::numeric_limits<int>::min());
        current_statement_begin__ = 155;
        int expose_aIDX(0);
        (void) expose_aIDX;  // dummy to suppress unused var warning

        stan::math::fill(expose_aIDX, std::numeric_limits<int>::min());


        current_statement_begin__ = 157;
        stan::math::assign(expose_DUR, (std::min(entry_tIDX,entry_aIDX) - 1));
        current_statement_begin__ = 158;
        stan::math::assign(expose_tIDX, (entry_tIDX - expose_DUR));
        current_statement_begin__ = 159;
        stan::math::assign(expose_aIDX, (entry_aIDX - expose_DUR));
        current_statement_begin__ = 161;
        if (as_bool(logical_gt(expose_DUR,0))) {
            {
            current_statement_begin__ = 162;
            validate_non_negative_index("phivsurv", "expose_DUR", expose_DUR);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  phivsurv(static_cast<Eigen::VectorXd::Index>(expose_DUR));
            (void) phivsurv;  // dummy to suppress unused var warning

            stan::math::initialize(phivsurv, DUMMY_VAR__);
            stan::math::fill(phivsurv,DUMMY_VAR__);
            current_statement_begin__ = 163;
            validate_non_negative_index("log_psurventry_i", "expose_DUR", expose_DUR);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  log_psurventry_i(static_cast<Eigen::VectorXd::Index>(expose_DUR));
            (void) log_psurventry_i;  // dummy to suppress unused var warning

            stan::math::initialize(log_psurventry_i, DUMMY_VAR__);
            stan::math::fill(log_psurventry_i,DUMMY_VAR__);


            current_statement_begin__ = 165;
            stan::math::assign(phivsurv, calc_phivsurv(expose_tIDX,expose_aIDX,expose_DUR,entry_tIDX,hivsurv_dur_a0,hivmxMID_dur_a0,artrr_MID,artstart_tIDX,dt, pstream__));
            current_statement_begin__ = 167;
            for (int ii = 1; ii <= expose_DUR; ++ii) {
                current_statement_begin__ = 168;
                stan::model::assign(log_psurventry_i, 
                            stan::model::cons_list(stan::model::index_uni(ii), stan::model::nil_index_list()), 
                            ((get_base1(cumavoidMID_time_age,((expose_tIDX + ii) - 1),((expose_aIDX + ii) - 1),"cumavoidMID_time_age",1) * get_base1(incrateMID_time_age,((expose_tIDX + ii) - 1),((expose_aIDX + ii) - 1),"incrateMID_time_age",1)) * get_base1(phivsurv,ii,"phivsurv",1)), 
                            "assigning variable log_psurventry_i");
            }
            current_statement_begin__ = 172;
            stan::math::assign(log_psurventry, stan::math::log((((dt * sum(log_psurventry_i)) + get_base1(cumavoid_time_age,entry_tIDX,entry_aIDX,"cumavoid_time_age",1)) * get_base1(natsurv_time_age,entry_tIDX,entry_aIDX,"natsurv_time_age",1))));
            }
        } else {
            current_statement_begin__ = 174;
            stan::math::assign(log_psurventry, 0.0);
        }
        current_statement_begin__ = 176;
        return stan::math::promote_scalar<fun_return_scalar_t__>(log_psurventry);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_log_psurventry_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T9__, typename T10__>
        typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__, T9__, T10__>::type>::type
    operator()(const int& entry_tIDX,
                        const int& entry_aIDX,
                        const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                        const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                        const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                        const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                        const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                        const Eigen::Matrix<T7__, Eigen::Dynamic,1>& artrr_MID,
                        const int& artstart_tIDX,
                        const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                        const T10__& dt, std::ostream* pstream__) const {
        return calc_log_psurventry(entry_tIDX, entry_aIDX, cumavoid_time_age, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmxMID_dur_a0, artrr_MID, artstart_tIDX, natsurv_time_age, dt, pstream__);
    }
};

template <typename T4__, typename T5__, typename T6__>
typename boost::math::tools::promote_args<T4__, T5__, T6__>::type
calc_phivn(const int& exit_tIDX,
               const int& exit_aIDX,
               const int& death,
               const int& hivpos,
               const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
               const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
               const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T4__, T5__, T6__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 186;
        local_scalar_t__ phivn;
        (void) phivn;  // dummy to suppress unused var warning

        stan::math::initialize(phivn, DUMMY_VAR__);
        stan::math::fill(phivn,DUMMY_VAR__);


        current_statement_begin__ = 188;
        if (as_bool(hivpos)) {
            current_statement_begin__ = 189;
            stan::math::assign(phivn, 0);
        } else {

            current_statement_begin__ = 191;
            stan::math::assign(phivn, (get_base1(cumavoid_time_age,exit_tIDX,exit_aIDX,"cumavoid_time_age",1) * get_base1(natsurv_time_age,exit_tIDX,exit_aIDX,"natsurv_time_age",1)));
            current_statement_begin__ = 192;
            if (as_bool(death)) {
                current_statement_begin__ = 193;
                stan::math::assign(phivn, stan::model::deep_copy((phivn * get_base1(natmx_time_age,exit_tIDX,exit_aIDX,"natmx_time_age",1))));
            }
        }
        current_statement_begin__ = 196;
        return stan::math::promote_scalar<fun_return_scalar_t__>(phivn);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_phivn_functor__ {
    template <typename T4__, typename T5__, typename T6__>
        typename boost::math::tools::promote_args<T4__, T5__, T6__>::type
    operator()(const int& exit_tIDX,
               const int& exit_aIDX,
               const int& death,
               const int& hivpos,
               const Eigen::Matrix<T4__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
               const Eigen::Matrix<T5__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
               const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age, std::ostream* pstream__) const {
        return calc_phivn(exit_tIDX, exit_aIDX, death, hivpos, cumavoid_time_age, natsurv_time_age, natmx_time_age, pstream__);
    }
};

template <typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T14__, typename T15__, typename T16__>
typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T14__, typename boost::math::tools::promote_args<T15__, T16__>::type>::type>::type
calc_phivp(const int& exit_tIDX,
               const int& exit_aIDX,
               const int& expose_tIDX,
               const int& expose_aIDX,
               const int& expose_DUR,
               const int& death,
               const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
               const Eigen::Matrix<T7__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
               const Eigen::Matrix<T8__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
               const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
               const Eigen::Matrix<T10__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
               const Eigen::Matrix<T11__, Eigen::Dynamic,1>& artrr,
               const Eigen::Matrix<T12__, Eigen::Dynamic,1>& artrr_MID,
               const int& artstart_tIDX,
               const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
               const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
               const T16__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T14__, typename boost::math::tools::promote_args<T15__, T16__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 211;
        local_scalar_t__ phivp;
        (void) phivp;  // dummy to suppress unused var warning

        stan::math::initialize(phivp, DUMMY_VAR__);
        stan::math::fill(phivp,DUMMY_VAR__);


        current_statement_begin__ = 213;
        if (as_bool(logical_gt(expose_DUR,0))) {
            {
            current_statement_begin__ = 214;
            validate_non_negative_index("phivsurv", "expose_DUR", expose_DUR);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  phivsurv(static_cast<Eigen::VectorXd::Index>(expose_DUR));
            (void) phivsurv;  // dummy to suppress unused var warning

            stan::math::initialize(phivsurv, DUMMY_VAR__);
            stan::math::fill(phivsurv,DUMMY_VAR__);
            current_statement_begin__ = 215;
            validate_non_negative_index("integrand", "expose_DUR", expose_DUR);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  integrand(static_cast<Eigen::VectorXd::Index>(expose_DUR));
            (void) integrand;  // dummy to suppress unused var warning

            stan::math::initialize(integrand, DUMMY_VAR__);
            stan::math::fill(integrand,DUMMY_VAR__);


            current_statement_begin__ = 217;
            stan::math::assign(phivsurv, calc_phivsurv(expose_tIDX,expose_aIDX,expose_DUR,exit_tIDX,hivsurv_dur_a0,hivmxMID_dur_a0,artrr_MID,artstart_tIDX,dt, pstream__));
            current_statement_begin__ = 220;
            for (int ii = 1; ii <= expose_DUR; ++ii) {
                current_statement_begin__ = 221;
                stan::model::assign(integrand, 
                            stan::model::cons_list(stan::model::index_uni(ii), stan::model::nil_index_list()), 
                            ((get_base1(cumavoidMID_time_age,((expose_tIDX + ii) - 1),((expose_aIDX + ii) - 1),"cumavoidMID_time_age",1) * get_base1(incrateMID_time_age,((expose_tIDX + ii) - 1),((expose_aIDX + ii) - 1),"incrateMID_time_age",1)) * get_base1(phivsurv,ii,"phivsurv",1)), 
                            "assigning variable integrand");
            }
            current_statement_begin__ = 225;
            if (as_bool(death)) {
                current_statement_begin__ = 226;
                stan::math::assign(integrand, stan::model::deep_copy(elt_multiply(integrand,add(calc_hivmx(expose_tIDX,expose_aIDX,expose_DUR,exit_tIDX,hivmx_dur_a0,artrr,artstart_tIDX, pstream__),get_base1(natmx_time_age,exit_tIDX,exit_aIDX,"natmx_time_age",1)))));
            }
            current_statement_begin__ = 230;
            stan::math::assign(phivp, ((dt * sum(integrand)) * get_base1(natsurv_time_age,exit_tIDX,exit_aIDX,"natsurv_time_age",1)));
            }
        } else {
            current_statement_begin__ = 232;
            stan::math::assign(phivp, 0.0);
        }
        current_statement_begin__ = 234;
        return stan::math::promote_scalar<fun_return_scalar_t__>(phivp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_phivp_functor__ {
    template <typename T6__, typename T7__, typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T14__, typename T15__, typename T16__>
        typename boost::math::tools::promote_args<T6__, T7__, T8__, T9__, typename boost::math::tools::promote_args<T10__, T11__, T12__, T14__, typename boost::math::tools::promote_args<T15__, T16__>::type>::type>::type
    operator()(const int& exit_tIDX,
               const int& exit_aIDX,
               const int& expose_tIDX,
               const int& expose_aIDX,
               const int& expose_DUR,
               const int& death,
               const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
               const Eigen::Matrix<T7__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
               const Eigen::Matrix<T8__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
               const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
               const Eigen::Matrix<T10__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
               const Eigen::Matrix<T11__, Eigen::Dynamic,1>& artrr,
               const Eigen::Matrix<T12__, Eigen::Dynamic,1>& artrr_MID,
               const int& artstart_tIDX,
               const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
               const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
               const T16__& dt, std::ostream* pstream__) const {
        return calc_phivp(exit_tIDX, exit_aIDX, expose_tIDX, expose_aIDX, expose_DUR, death, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmx_dur_a0, hivmxMID_dur_a0, artrr, artrr_MID, artstart_tIDX, natsurv_time_age, natmx_time_age, dt, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T6__, T7__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
create_phivp_mat(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                     const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& artrr_MID,
                     const int& artstart_tIDX,
                     const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                     const T7__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 246;
        validate_non_negative_index("phivp", "rows(natsurv_time_age)", rows(natsurv_time_age));
        validate_non_negative_index("phivp", "cols(natsurv_time_age)", cols(natsurv_time_age));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  phivp(static_cast<Eigen::VectorXd::Index>(rows(natsurv_time_age)),static_cast<Eigen::VectorXd::Index>(cols(natsurv_time_age)));
        (void) phivp;  // dummy to suppress unused var warning

        stan::math::initialize(phivp, DUMMY_VAR__);
        stan::math::fill(phivp,DUMMY_VAR__);
        current_statement_begin__ = 247;
        int steps_time(0);
        (void) steps_time;  // dummy to suppress unused var warning

        stan::math::fill(steps_time, std::numeric_limits<int>::min());
        current_statement_begin__ = 248;
        int steps_age(0);
        (void) steps_age;  // dummy to suppress unused var warning

        stan::math::fill(steps_age, std::numeric_limits<int>::min());


        current_statement_begin__ = 250;
        stan::math::assign(steps_time, rows(natsurv_time_age));
        current_statement_begin__ = 251;
        stan::math::assign(steps_age, cols(natsurv_time_age));
        current_statement_begin__ = 254;
        for (int cidx = (1 - steps_age); cidx <= (steps_time - 1); ++cidx) {
            {
            current_statement_begin__ = 256;
            int min_tidx(0);
            (void) min_tidx;  // dummy to suppress unused var warning

            stan::math::fill(min_tidx, std::numeric_limits<int>::min());
            current_statement_begin__ = 257;
            int max_tidx(0);
            (void) max_tidx;  // dummy to suppress unused var warning

            stan::math::fill(max_tidx, std::numeric_limits<int>::min());
            current_statement_begin__ = 258;
            validate_non_negative_index("incdens_coh", "(steps_time - 1)", (steps_time - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  incdens_coh(static_cast<Eigen::VectorXd::Index>((steps_time - 1)));
            (void) incdens_coh;  // dummy to suppress unused var warning

            stan::math::initialize(incdens_coh, DUMMY_VAR__);
            stan::math::fill(incdens_coh,DUMMY_VAR__);
            current_statement_begin__ = 259;
            validate_non_negative_index("phivsurv_coh", "(steps_time - 1)", (steps_time - 1));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  phivsurv_coh(static_cast<Eigen::VectorXd::Index>((steps_time - 1)));
            (void) phivsurv_coh;  // dummy to suppress unused var warning

            stan::math::initialize(phivsurv_coh, DUMMY_VAR__);
            stan::math::fill(phivsurv_coh,DUMMY_VAR__);


            current_statement_begin__ = 261;
            stan::math::assign(min_tidx, std::max(1,(1 + cidx)));
            current_statement_begin__ = 262;
            stan::math::assign(max_tidx, std::min(steps_time,(steps_age + cidx)));
            current_statement_begin__ = 264;
            for (int tidx = min_tidx; tidx <= max_tidx; ++tidx) {
                current_statement_begin__ = 265;
                if (as_bool(logical_gt(tidx,min_tidx))) {
                    {
                    current_statement_begin__ = 266;
                    int tmin1(0);
                    (void) tmin1;  // dummy to suppress unused var warning

                    stan::math::fill(tmin1, std::numeric_limits<int>::min());
                    current_statement_begin__ = 267;
                    int exp_DUR(0);
                    (void) exp_DUR;  // dummy to suppress unused var warning

                    stan::math::fill(exp_DUR, std::numeric_limits<int>::min());


                    current_statement_begin__ = 268;
                    stan::math::assign(exp_DUR, (tidx - min_tidx));
                    current_statement_begin__ = 270;
                    stan::math::assign(tmin1, (tidx - 1));
                    current_statement_begin__ = 271;
                    stan::model::assign(incdens_coh, 
                                stan::model::cons_list(stan::model::index_uni(tmin1), stan::model::nil_index_list()), 
                                (get_base1(cumavoidMID_time_age,tmin1,(tmin1 - cidx),"cumavoidMID_time_age",1) * get_base1(incrateMID_time_age,tmin1,(tmin1 - cidx),"incrateMID_time_age",1)), 
                                "assigning variable incdens_coh");
                    current_statement_begin__ = 272;
                    if (as_bool(logical_lte(tidx,artstart_tIDX))) {
                        current_statement_begin__ = 273;
                        for (int t0idx = min_tidx; t0idx <= (tidx - 1); ++t0idx) {
                            current_statement_begin__ = 274;
                            stan::model::assign(phivsurv_coh, 
                                        stan::model::cons_list(stan::model::index_uni(t0idx), stan::model::nil_index_list()), 
                                        get_base1(hivsurv_dur_a0,(tidx - t0idx),(t0idx - cidx),"hivsurv_dur_a0",1), 
                                        "assigning variable phivsurv_coh");
                        }
                    } else {

                        current_statement_begin__ = 276;
                        stan::model::assign(phivsurv_coh, 
                                    stan::model::cons_list(stan::model::index_uni(tmin1), stan::model::nil_index_list()), 
                                    1.0, 
                                    "assigning variable phivsurv_coh");
                        current_statement_begin__ = 277;
                        for (int t0idx = min_tidx; t0idx <= (tidx - 1); ++t0idx) {
                            current_statement_begin__ = 278;
                            stan::model::assign(phivsurv_coh, 
                                        stan::model::cons_list(stan::model::index_uni(t0idx), stan::model::nil_index_list()), 
                                        stan::model::deep_copy((get_base1(phivsurv_coh,t0idx,"phivsurv_coh",1) * stan::math::exp(((-(dt) * get_base1(hivmxMID_dur_a0,(tidx - t0idx),(t0idx - cidx),"hivmxMID_dur_a0",1)) * get_base1(artrr_MID,tmin1,"artrr_MID",1))))), 
                                        "assigning variable phivsurv_coh");
                        }
                    }
                    current_statement_begin__ = 281;
                    stan::model::assign(phivp, 
                                stan::model::cons_list(stan::model::index_uni(tidx), stan::model::cons_list(stan::model::index_uni((tidx - cidx)), stan::model::nil_index_list())), 
                                ((dt * sum(elt_multiply(segment(incdens_coh,min_tidx,exp_DUR),segment(phivsurv_coh,min_tidx,exp_DUR)))) * get_base1(natsurv_time_age,tidx,(tidx - cidx),"natsurv_time_age",1)), 
                                "assigning variable phivp");
                    }
                } else {
                    current_statement_begin__ = 283;
                    stan::model::assign(phivp, 
                                stan::model::cons_list(stan::model::index_uni(tidx), stan::model::cons_list(stan::model::index_uni((tidx - cidx)), stan::model::nil_index_list())), 
                                0.0, 
                                "assigning variable phivp");
                }
            }
            }
        }
        current_statement_begin__ = 286;
        return stan::math::promote_scalar<fun_return_scalar_t__>(phivp);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct create_phivp_mat_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T6__, T7__>::type>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                     const Eigen::Matrix<T1__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                     const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                     const Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                     const Eigen::Matrix<T4__, Eigen::Dynamic,1>& artrr_MID,
                     const int& artstart_tIDX,
                     const Eigen::Matrix<T6__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                     const T7__& dt, std::ostream* pstream__) const {
        return create_phivp_mat(cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmxMID_dur_a0, artrr_MID, artstart_tIDX, natsurv_time_age, dt, pstream__);
    }
};

template <typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T20__, typename T21__, typename T22__>
typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type
calc_ll_ind(const int& entry_tIDX,
                const int& entry_aIDX,
                const int& exit_tIDX,
                const int& exit_aIDX,
                const int& expose_tIDX,
                const int& expose_aIDX,
                const int& expose_DUR,
                const int& death,
                const int& deathinterv,
                const int& deathinterv_DUR,
                const int& hivpos,
                const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                const Eigen::Matrix<T17__, Eigen::Dynamic,1>& artrr,
                const Eigen::Matrix<T18__, Eigen::Dynamic,1>& artrr_MID,
                const int& artstart_tIDX,
                const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                const Eigen::Matrix<T21__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                const T22__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 304;
        local_scalar_t__ log_psurventry;
        (void) log_psurventry;  // dummy to suppress unused var warning

        stan::math::initialize(log_psurventry, DUMMY_VAR__);
        stan::math::fill(log_psurventry,DUMMY_VAR__);
        current_statement_begin__ = 305;
        local_scalar_t__ phivn;
        (void) phivn;  // dummy to suppress unused var warning

        stan::math::initialize(phivn, DUMMY_VAR__);
        stan::math::fill(phivn,DUMMY_VAR__);
        current_statement_begin__ = 306;
        local_scalar_t__ phivp;
        (void) phivp;  // dummy to suppress unused var warning

        stan::math::initialize(phivp, DUMMY_VAR__);
        stan::math::fill(phivp,DUMMY_VAR__);
        current_statement_begin__ = 307;
        local_scalar_t__ phivn_d;
        (void) phivn_d;  // dummy to suppress unused var warning

        stan::math::initialize(phivn_d, DUMMY_VAR__);
        stan::math::fill(phivn_d,DUMMY_VAR__);
        current_statement_begin__ = 308;
        local_scalar_t__ phivp_d;
        (void) phivp_d;  // dummy to suppress unused var warning

        stan::math::initialize(phivp_d, DUMMY_VAR__);
        stan::math::fill(phivp_d,DUMMY_VAR__);


        current_statement_begin__ = 311;
        stan::math::assign(log_psurventry, calc_log_psurventry(entry_tIDX,entry_aIDX,cumavoid_time_age,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmxMID_dur_a0,artrr_MID,artstart_tIDX,natsurv_time_age,dt, pstream__));
        current_statement_begin__ = 316;
        stan::math::assign(phivn, calc_phivn(exit_tIDX,exit_aIDX,death,hivpos,cumavoid_time_age,natsurv_time_age,natmx_time_age, pstream__));
        current_statement_begin__ = 319;
        stan::math::assign(phivp, calc_phivp(exit_tIDX,exit_aIDX,expose_tIDX,expose_aIDX,expose_DUR,death,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
        current_statement_begin__ = 326;
        if (as_bool(deathinterv)) {
            {
            current_statement_begin__ = 330;
            int expose_dinterv_DUR(0);
            (void) expose_dinterv_DUR;  // dummy to suppress unused var warning

            stan::math::fill(expose_dinterv_DUR, std::numeric_limits<int>::min());


            current_statement_begin__ = 331;
            if (as_bool(hivpos)) {
                current_statement_begin__ = 332;
                stan::math::assign(expose_dinterv_DUR, expose_DUR);
            } else {
                current_statement_begin__ = 334;
                stan::math::assign(expose_dinterv_DUR, (expose_DUR + deathinterv_DUR));
            }
            current_statement_begin__ = 336;
            stan::math::assign(phivn_d, calc_phivn((exit_tIDX + deathinterv_DUR),(exit_aIDX + deathinterv_DUR),death,hivpos,cumavoid_time_age,natsurv_time_age,natmx_time_age, pstream__));
            current_statement_begin__ = 339;
            stan::math::assign(phivp_d, calc_phivp((exit_tIDX + deathinterv_DUR),(exit_aIDX + deathinterv_DUR),expose_tIDX,expose_aIDX,expose_dinterv_DUR,death,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
            }
        } else {

            current_statement_begin__ = 346;
            stan::math::assign(phivn_d, 0);
            current_statement_begin__ = 347;
            stan::math::assign(phivp_d, 0);
        }
        current_statement_begin__ = 350;
        return stan::math::promote_scalar<fun_return_scalar_t__>((stan::math::log((((phivn + phivp) - phivn_d) - phivp_d)) - log_psurventry));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_ll_ind_functor__ {
    template <typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T20__, typename T21__, typename T22__>
        typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type
    operator()(const int& entry_tIDX,
                const int& entry_aIDX,
                const int& exit_tIDX,
                const int& exit_aIDX,
                const int& expose_tIDX,
                const int& expose_aIDX,
                const int& expose_DUR,
                const int& death,
                const int& deathinterv,
                const int& deathinterv_DUR,
                const int& hivpos,
                const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                const Eigen::Matrix<T17__, Eigen::Dynamic,1>& artrr,
                const Eigen::Matrix<T18__, Eigen::Dynamic,1>& artrr_MID,
                const int& artstart_tIDX,
                const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                const Eigen::Matrix<T21__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                const T22__& dt, std::ostream* pstream__) const {
        return calc_ll_ind(entry_tIDX, entry_aIDX, exit_tIDX, exit_aIDX, expose_tIDX, expose_aIDX, expose_DUR, death, deathinterv, deathinterv_DUR, hivpos, cumavoid_time_age, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmx_dur_a0, hivmxMID_dur_a0, artrr, artrr_MID, artstart_tIDX, natsurv_time_age, natmx_time_age, dt, pstream__);
    }
};

template <typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T20__, typename T21__, typename T22__>
Eigen::Matrix<typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type, Eigen::Dynamic,1>
calc_ll_coh(const std::vector<int>& entry_tIDX,
                const std::vector<int>& entry_aIDX,
                const std::vector<int>& exit_tIDX,
                const std::vector<int>& exit_aIDX,
                const std::vector<int>& expose_tIDX,
                const std::vector<int>& expose_aIDX,
                const std::vector<int>& expose_DUR,
                const std::vector<int>& death,
                const std::vector<int>& deathinterv,
                const std::vector<int>& deathinterv_DUR,
                const std::vector<int>& hivpos,
                const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                const Eigen::Matrix<T17__, Eigen::Dynamic,1>& artrr,
                const Eigen::Matrix<T18__, Eigen::Dynamic,1>& artrr_MID,
                const int& artstart_tIDX,
                const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                const Eigen::Matrix<T21__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                const T22__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 367;
        validate_non_negative_index("ll_coh", "size(entry_tIDX)", size(entry_tIDX));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll_coh(static_cast<Eigen::VectorXd::Index>(size(entry_tIDX)));
        (void) ll_coh;  // dummy to suppress unused var warning

        stan::math::initialize(ll_coh, DUMMY_VAR__);
        stan::math::fill(ll_coh,DUMMY_VAR__);


        current_statement_begin__ = 369;
        for (int i = 1; i <= size(entry_tIDX); ++i) {
            current_statement_begin__ = 370;
            stan::model::assign(ll_coh, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        calc_ll_ind(get_base1(entry_tIDX,i,"entry_tIDX",1),get_base1(entry_aIDX,i,"entry_aIDX",1),get_base1(exit_tIDX,i,"exit_tIDX",1),get_base1(exit_aIDX,i,"exit_aIDX",1),get_base1(expose_tIDX,i,"expose_tIDX",1),get_base1(expose_aIDX,i,"expose_aIDX",1),get_base1(expose_DUR,i,"expose_DUR",1),get_base1(death,i,"death",1),get_base1(deathinterv,i,"deathinterv",1),get_base1(deathinterv_DUR,i,"deathinterv_DUR",1),get_base1(hivpos,i,"hivpos",1),cumavoid_time_age,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__), 
                        "assigning variable ll_coh");
        }
        current_statement_begin__ = 379;
        return stan::math::promote_scalar<fun_return_scalar_t__>(ll_coh);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_ll_coh_functor__ {
    template <typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T20__, typename T21__, typename T22__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T11__, T12__, T13__, T14__, typename boost::math::tools::promote_args<T15__, T16__, T17__, T18__, typename boost::math::tools::promote_args<T20__, T21__, T22__>::type>::type>::type, Eigen::Dynamic,1>
    operator()(const std::vector<int>& entry_tIDX,
                const std::vector<int>& entry_aIDX,
                const std::vector<int>& exit_tIDX,
                const std::vector<int>& exit_aIDX,
                const std::vector<int>& expose_tIDX,
                const std::vector<int>& expose_aIDX,
                const std::vector<int>& expose_DUR,
                const std::vector<int>& death,
                const std::vector<int>& deathinterv,
                const std::vector<int>& deathinterv_DUR,
                const std::vector<int>& hivpos,
                const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                const Eigen::Matrix<T17__, Eigen::Dynamic,1>& artrr,
                const Eigen::Matrix<T18__, Eigen::Dynamic,1>& artrr_MID,
                const int& artstart_tIDX,
                const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                const Eigen::Matrix<T21__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                const T22__& dt, std::ostream* pstream__) const {
        return calc_ll_coh(entry_tIDX, entry_aIDX, exit_tIDX, exit_aIDX, expose_tIDX, expose_aIDX, expose_DUR, death, deathinterv, deathinterv_DUR, hivpos, cumavoid_time_age, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmx_dur_a0, hivmxMID_dur_a0, artrr, artrr_MID, artstart_tIDX, natsurv_time_age, natmx_time_age, dt, pstream__);
    }
};

template <typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T18__, typename T19__, typename T20__>
typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__, T18__, T19__, T20__>::type>::type>::type
calc_ll_coh_aggr(const std::vector<int>& cohIDX,
                     const std::vector<int>& exit_tIDX,
                     const std::vector<int>& exposestart_tIDX,
                     const std::vector<int>& exposeend_tIDX,
                     const std::vector<int>& death,
                     const std::vector<int>& deathinterv,
                     const std::vector<int>& deathinterv_DUR,
                     const std::vector<int>& hivpos,
                     const Eigen::Matrix<T8__, Eigen::Dynamic,1>& nrepl,
                     const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                     const Eigen::Matrix<T10__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                     const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                     const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                     const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                     const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                     const Eigen::Matrix<T15__, Eigen::Dynamic,1>& artrr,
                     const Eigen::Matrix<T16__, Eigen::Dynamic,1>& artrr_MID,
                     const int& artstart_tIDX,
                     const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                     const Eigen::Matrix<T19__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                     const T20__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__, T18__, T19__, T20__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 390;
        validate_non_negative_index("ll_one", "rows(nrepl)", rows(nrepl));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll_one(static_cast<Eigen::VectorXd::Index>(rows(nrepl)));
        (void) ll_one;  // dummy to suppress unused var warning

        stan::math::initialize(ll_one, DUMMY_VAR__);
        stan::math::fill(ll_one,DUMMY_VAR__);


        current_statement_begin__ = 392;
        for (int i = 1; i <= rows(ll_one); ++i) {
            {
            current_statement_begin__ = 393;
            local_scalar_t__ phivp;
            (void) phivp;  // dummy to suppress unused var warning

            stan::math::initialize(phivp, DUMMY_VAR__);
            stan::math::fill(phivp,DUMMY_VAR__);
            current_statement_begin__ = 394;
            local_scalar_t__ phivn;
            (void) phivn;  // dummy to suppress unused var warning

            stan::math::initialize(phivn, DUMMY_VAR__);
            stan::math::fill(phivn,DUMMY_VAR__);
            current_statement_begin__ = 395;
            local_scalar_t__ phivp_d;
            (void) phivp_d;  // dummy to suppress unused var warning

            stan::math::initialize(phivp_d, DUMMY_VAR__);
            stan::math::fill(phivp_d,DUMMY_VAR__);
            current_statement_begin__ = 396;
            local_scalar_t__ phivn_d;
            (void) phivn_d;  // dummy to suppress unused var warning

            stan::math::initialize(phivn_d, DUMMY_VAR__);
            stan::math::fill(phivn_d,DUMMY_VAR__);


            current_statement_begin__ = 398;
            stan::math::assign(phivp, calc_phivp(get_base1(exit_tIDX,i,"exit_tIDX",1),(get_base1(exit_tIDX,i,"exit_tIDX",1) - get_base1(cohIDX,i,"cohIDX",1)),get_base1(exposestart_tIDX,i,"exposestart_tIDX",1),(get_base1(exposestart_tIDX,i,"exposestart_tIDX",1) - get_base1(cohIDX,i,"cohIDX",1)),((get_base1(exposeend_tIDX,i,"exposeend_tIDX",1) - get_base1(exposestart_tIDX,i,"exposestart_tIDX",1)) + 1),get_base1(death,i,"death",1),cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
            current_statement_begin__ = 404;
            stan::math::assign(phivn, calc_phivn(get_base1(exit_tIDX,i,"exit_tIDX",1),(get_base1(exit_tIDX,i,"exit_tIDX",1) - get_base1(cohIDX,i,"cohIDX",1)),get_base1(death,i,"death",1),get_base1(hivpos,i,"hivpos",1),cumavoid_time_age,natsurv_time_age,natmx_time_age, pstream__));
            current_statement_begin__ = 407;
            if (as_bool(get_base1(deathinterv,i,"deathinterv",1))) {
                {
                current_statement_begin__ = 410;
                int expose_dinterv_DUR(0);
                (void) expose_dinterv_DUR;  // dummy to suppress unused var warning

                stan::math::fill(expose_dinterv_DUR, std::numeric_limits<int>::min());


                current_statement_begin__ = 411;
                if (as_bool(get_base1(hivpos,i,"hivpos",1))) {
                    current_statement_begin__ = 412;
                    stan::math::assign(expose_dinterv_DUR, ((get_base1(exposeend_tIDX,i,"exposeend_tIDX",1) - get_base1(exposestart_tIDX,i,"exposestart_tIDX",1)) + 1));
                } else {
                    current_statement_begin__ = 414;
                    stan::math::assign(expose_dinterv_DUR, (((get_base1(exposeend_tIDX,i,"exposeend_tIDX",1) - get_base1(exposestart_tIDX,i,"exposestart_tIDX",1)) + 1) + get_base1(deathinterv_DUR,i,"deathinterv_DUR",1)));
                }
                current_statement_begin__ = 416;
                stan::math::assign(phivp_d, calc_phivp((get_base1(exit_tIDX,i,"exit_tIDX",1) + get_base1(deathinterv_DUR,i,"deathinterv_DUR",1)),((get_base1(exit_tIDX,i,"exit_tIDX",1) + get_base1(deathinterv_DUR,i,"deathinterv_DUR",1)) - get_base1(cohIDX,i,"cohIDX",1)),get_base1(exposestart_tIDX,i,"exposestart_tIDX",1),(get_base1(exposestart_tIDX,i,"exposestart_tIDX",1) - get_base1(cohIDX,i,"cohIDX",1)),expose_dinterv_DUR,get_base1(death,i,"death",1),cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
                current_statement_begin__ = 423;
                stan::math::assign(phivn_d, calc_phivn((get_base1(exit_tIDX,i,"exit_tIDX",1) + get_base1(deathinterv_DUR,i,"deathinterv_DUR",1)),((get_base1(exit_tIDX,i,"exit_tIDX",1) + get_base1(deathinterv_DUR,i,"deathinterv_DUR",1)) - get_base1(cohIDX,i,"cohIDX",1)),get_base1(death,i,"death",1),get_base1(hivpos,i,"hivpos",1),cumavoid_time_age,natsurv_time_age,natmx_time_age, pstream__));
                }
            } else {

                current_statement_begin__ = 426;
                stan::math::assign(phivp_d, 0);
                current_statement_begin__ = 427;
                stan::math::assign(phivn_d, 0);
            }
            current_statement_begin__ = 430;
            stan::model::assign(ll_one, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        stan::math::log((((phivp + phivn) - phivp_d) - phivn_d)), 
                        "assigning variable ll_one");
            }
        }
        current_statement_begin__ = 433;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dot_product(ll_one,nrepl));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_ll_coh_aggr_functor__ {
    template <typename T8__, typename T9__, typename T10__, typename T11__, typename T12__, typename T13__, typename T14__, typename T15__, typename T16__, typename T18__, typename T19__, typename T20__>
        typename boost::math::tools::promote_args<T8__, T9__, T10__, T11__, typename boost::math::tools::promote_args<T12__, T13__, T14__, T15__, typename boost::math::tools::promote_args<T16__, T18__, T19__, T20__>::type>::type>::type
    operator()(const std::vector<int>& cohIDX,
                     const std::vector<int>& exit_tIDX,
                     const std::vector<int>& exposestart_tIDX,
                     const std::vector<int>& exposeend_tIDX,
                     const std::vector<int>& death,
                     const std::vector<int>& deathinterv,
                     const std::vector<int>& deathinterv_DUR,
                     const std::vector<int>& hivpos,
                     const Eigen::Matrix<T8__, Eigen::Dynamic,1>& nrepl,
                     const Eigen::Matrix<T9__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                     const Eigen::Matrix<T10__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                     const Eigen::Matrix<T11__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                     const Eigen::Matrix<T12__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                     const Eigen::Matrix<T13__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                     const Eigen::Matrix<T14__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                     const Eigen::Matrix<T15__, Eigen::Dynamic,1>& artrr,
                     const Eigen::Matrix<T16__, Eigen::Dynamic,1>& artrr_MID,
                     const int& artstart_tIDX,
                     const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                     const Eigen::Matrix<T19__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                     const T20__& dt, std::ostream* pstream__) const {
        return calc_ll_coh_aggr(cohIDX, exit_tIDX, exposestart_tIDX, exposeend_tIDX, death, deathinterv, deathinterv_DUR, hivpos, nrepl, cumavoid_time_age, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmx_dur_a0, hivmxMID_dur_a0, artrr, artrr_MID, artstart_tIDX, natsurv_time_age, natmx_time_age, dt, pstream__);
    }
};

template <typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T19__, typename T20__, typename T21__, typename T22__, typename T24__, typename T25__, typename T26__>
typename boost::math::tools::promote_args<T14__, T15__, T16__, T17__, typename boost::math::tools::promote_args<T18__, T19__, T20__, T21__, typename boost::math::tools::promote_args<T22__, T24__, T25__, T26__>::type>::type>::type
calc_ll_cohexit(const std::vector<int>& coh_cIDX,
                    const std::vector<int>& coh_minexpose_tIDX,
                    const std::vector<int>& coh_maxexpose_tIDX,
                    const std::vector<int>& coh_nexit,
                    const std::vector<int>& exdat_tIDX,
                    const std::vector<int>& exdat_minexpose_tIDX,
                    const std::vector<int>& exdat_maxexpose_tIDX,
                    const std::vector<int>& exdat_ndat,
                    const std::vector<int>& aggr_exposestart_tIDX,
                    const std::vector<int>& aggr_exposeend_tIDX,
                    const std::vector<int>& aggr_death,
                    const std::vector<int>& aggr_deathinterv,
                    const std::vector<int>& aggr_deathinterv_DUR,
                    const std::vector<int>& aggr_hivpos,
                    const Eigen::Matrix<T14__, Eigen::Dynamic,1>& aggr_nrepl,
                    const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                    const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                    const Eigen::Matrix<T17__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                    const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                    const Eigen::Matrix<T19__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                    const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                    const Eigen::Matrix<T21__, Eigen::Dynamic,1>& artrr,
                    const Eigen::Matrix<T22__, Eigen::Dynamic,1>& artrr_MID,
                    const int& artstart_tIDX,
                    const Eigen::Matrix<T24__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                    const Eigen::Matrix<T25__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                    const T26__& dt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T14__, T15__, T16__, T17__, typename boost::math::tools::promote_args<T18__, T19__, T20__, T21__, typename boost::math::tools::promote_args<T22__, T24__, T25__, T26__>::type>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 448;
        validate_non_negative_index("ll_one", "rows(aggr_nrepl)", rows(aggr_nrepl));
        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ll_one(static_cast<Eigen::VectorXd::Index>(rows(aggr_nrepl)));
        (void) ll_one;  // dummy to suppress unused var warning

        stan::math::initialize(ll_one, DUMMY_VAR__);
        stan::math::fill(ll_one,DUMMY_VAR__);
        current_statement_begin__ = 449;
        int aggr_i(0);
        (void) aggr_i;  // dummy to suppress unused var warning

        stan::math::fill(aggr_i, std::numeric_limits<int>::min());
        current_statement_begin__ = 450;
        int exdat_i(0);
        (void) exdat_i;  // dummy to suppress unused var warning

        stan::math::fill(exdat_i, std::numeric_limits<int>::min());
        current_statement_begin__ = 451;
        int max_aggr_i(0);
        (void) max_aggr_i;  // dummy to suppress unused var warning

        stan::math::fill(max_aggr_i, std::numeric_limits<int>::min());
        current_statement_begin__ = 452;
        int max_exdat_i(0);
        (void) max_exdat_i;  // dummy to suppress unused var warning

        stan::math::fill(max_exdat_i, std::numeric_limits<int>::min());


        current_statement_begin__ = 453;
        stan::math::assign(aggr_i, 0);
        current_statement_begin__ = 454;
        stan::math::assign(exdat_i, 0);
        current_statement_begin__ = 455;
        stan::math::assign(max_aggr_i, 0);
        current_statement_begin__ = 456;
        stan::math::assign(max_exdat_i, 0);
        current_statement_begin__ = 458;
        for (int coh_i = 1; coh_i <= size(coh_cIDX); ++coh_i) {
            {
            current_statement_begin__ = 460;
            int cidx(0);
            (void) cidx;  // dummy to suppress unused var warning

            stan::math::fill(cidx, std::numeric_limits<int>::min());
            current_statement_begin__ = 461;
            validate_non_negative_index("incdens_coh", "rows(cumavoidMID_time_age)", rows(cumavoidMID_time_age));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  incdens_coh(static_cast<Eigen::VectorXd::Index>(rows(cumavoidMID_time_age)));
            (void) incdens_coh;  // dummy to suppress unused var warning

            stan::math::initialize(incdens_coh, DUMMY_VAR__);
            stan::math::fill(incdens_coh,DUMMY_VAR__);
            current_statement_begin__ = 462;
            validate_non_negative_index("phivsurv_coh", "rows(cumavoidMID_time_age)", rows(cumavoidMID_time_age));
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  phivsurv_coh(static_cast<Eigen::VectorXd::Index>(rows(cumavoidMID_time_age)));
            (void) phivsurv_coh;  // dummy to suppress unused var warning

            stan::math::initialize(phivsurv_coh, DUMMY_VAR__);
            stan::math::fill(phivsurv_coh,DUMMY_VAR__);
            current_statement_begin__ = 463;
            int eidx_prev(0);
            (void) eidx_prev;  // dummy to suppress unused var warning

            stan::math::fill(eidx_prev, std::numeric_limits<int>::min());


            current_statement_begin__ = 465;
            stan::math::assign(cidx, get_base1(coh_cIDX,coh_i,"coh_cIDX",1));
            current_statement_begin__ = 466;
            stan::math::assign(eidx_prev, 0);
            current_statement_begin__ = 468;
            for (int tidx = get_base1(coh_minexpose_tIDX,coh_i,"coh_minexpose_tIDX",1); tidx <= get_base1(coh_maxexpose_tIDX,coh_i,"coh_maxexpose_tIDX",1); ++tidx) {
                current_statement_begin__ = 469;
                stan::model::assign(incdens_coh, 
                            stan::model::cons_list(stan::model::index_uni(tidx), stan::model::nil_index_list()), 
                            (get_base1(cumavoidMID_time_age,tidx,(tidx - cidx),"cumavoidMID_time_age",1) * get_base1(incrateMID_time_age,tidx,(tidx - cidx),"incrateMID_time_age",1)), 
                            "assigning variable incdens_coh");
            }
            current_statement_begin__ = 471;
            for (int ii = artstart_tIDX; ii <= get_base1(coh_maxexpose_tIDX,coh_i,"coh_maxexpose_tIDX",1); ++ii) {
                current_statement_begin__ = 472;
                stan::model::assign(phivsurv_coh, 
                            stan::model::cons_list(stan::model::index_uni(ii), stan::model::nil_index_list()), 
                            1.0, 
                            "assigning variable phivsurv_coh");
            }
            current_statement_begin__ = 474;
            stan::math::assign(max_exdat_i, stan::model::deep_copy((max_exdat_i + get_base1(coh_nexit,coh_i,"coh_nexit",1))));
            current_statement_begin__ = 475;
            while (as_bool(logical_lt(exdat_i,max_exdat_i))) {
                {
                current_statement_begin__ = 477;
                int eidx(0);
                (void) eidx;  // dummy to suppress unused var warning

                stan::math::fill(eidx, std::numeric_limits<int>::min());
                current_statement_begin__ = 478;
                local_scalar_t__ phivn_exit;
                (void) phivn_exit;  // dummy to suppress unused var warning

                stan::math::initialize(phivn_exit, DUMMY_VAR__);
                stan::math::fill(phivn_exit,DUMMY_VAR__);


                current_statement_begin__ = 480;
                stan::math::assign(exdat_i, stan::model::deep_copy((exdat_i + 1)));
                current_statement_begin__ = 481;
                stan::math::assign(eidx, get_base1(exdat_tIDX,exdat_i,"exdat_tIDX",1));
                current_statement_begin__ = 483;
                stan::math::assign(phivn_exit, (get_base1(cumavoid_time_age,eidx,(eidx - cidx),"cumavoid_time_age",1) * get_base1(natsurv_time_age,eidx,(eidx - cidx),"natsurv_time_age",1)));
                current_statement_begin__ = 487;
                if (as_bool(logical_lte(eidx,artstart_tIDX))) {

                    current_statement_begin__ = 488;
                    for (int t0idx = get_base1(exdat_minexpose_tIDX,exdat_i,"exdat_minexpose_tIDX",1); t0idx <= get_base1(exdat_maxexpose_tIDX,exdat_i,"exdat_maxexpose_tIDX",1); ++t0idx) {
                        current_statement_begin__ = 489;
                        stan::model::assign(phivsurv_coh, 
                                    stan::model::cons_list(stan::model::index_uni(t0idx), stan::model::nil_index_list()), 
                                    get_base1(hivsurv_dur_a0,(eidx - t0idx),(t0idx - cidx),"hivsurv_dur_a0",1), 
                                    "assigning variable phivsurv_coh");
                    }
                } else {

                    current_statement_begin__ = 493;
                    if (as_bool(logical_lt(eidx_prev,artstart_tIDX))) {

                        current_statement_begin__ = 494;
                        for (int t0idx = get_base1(exdat_minexpose_tIDX,exdat_i,"exdat_minexpose_tIDX",1); t0idx <= (artstart_tIDX - 1); ++t0idx) {
                            current_statement_begin__ = 495;
                            stan::model::assign(phivsurv_coh, 
                                        stan::model::cons_list(stan::model::index_uni(t0idx), stan::model::nil_index_list()), 
                                        get_base1(hivsurv_dur_a0,(artstart_tIDX - t0idx),(t0idx - cidx),"hivsurv_dur_a0",1), 
                                        "assigning variable phivsurv_coh");
                        }
                        current_statement_begin__ = 496;
                        stan::math::assign(eidx_prev, artstart_tIDX);
                    }
                    current_statement_begin__ = 500;
                    for (int t0idx = get_base1(exdat_minexpose_tIDX,exdat_i,"exdat_minexpose_tIDX",1); t0idx <= get_base1(exdat_maxexpose_tIDX,exdat_i,"exdat_maxexpose_tIDX",1); ++t0idx) {
                        {
                        current_statement_begin__ = 502;
                        int a0idx(0);
                        (void) a0idx;  // dummy to suppress unused var warning

                        stan::math::fill(a0idx, std::numeric_limits<int>::min());
                        current_statement_begin__ = 503;
                        int t0idxminus1(0);
                        (void) t0idxminus1;  // dummy to suppress unused var warning

                        stan::math::fill(t0idxminus1, std::numeric_limits<int>::min());
                        current_statement_begin__ = 504;
                        local_scalar_t__ cumhaz;
                        (void) cumhaz;  // dummy to suppress unused var warning

                        stan::math::initialize(cumhaz, DUMMY_VAR__);
                        stan::math::fill(cumhaz,DUMMY_VAR__);


                        current_statement_begin__ = 506;
                        stan::math::assign(a0idx, (t0idx - cidx));
                        current_statement_begin__ = 507;
                        stan::math::assign(t0idxminus1, (t0idx - 1));
                        current_statement_begin__ = 508;
                        stan::math::assign(cumhaz, 0);
                        current_statement_begin__ = 510;
                        for (int jj = std::max(t0idx,eidx_prev); jj <= (eidx - 1); ++jj) {
                            current_statement_begin__ = 511;
                            stan::math::assign(cumhaz, stan::model::deep_copy((cumhaz + (get_base1(hivmxMID_dur_a0,(jj - t0idxminus1),a0idx,"hivmxMID_dur_a0",1) * get_base1(artrr_MID,jj,"artrr_MID",1)))));
                        }
                        current_statement_begin__ = 513;
                        stan::model::assign(phivsurv_coh, 
                                    stan::model::cons_list(stan::model::index_uni(t0idx), stan::model::nil_index_list()), 
                                    stan::model::deep_copy((get_base1(phivsurv_coh,t0idx,"phivsurv_coh",1) * stan::math::exp((-(dt) * cumhaz)))), 
                                    "assigning variable phivsurv_coh");
                        }
                    }
                }
                current_statement_begin__ = 517;
                stan::math::assign(eidx_prev, eidx);
                current_statement_begin__ = 519;
                stan::math::assign(max_aggr_i, stan::model::deep_copy((max_aggr_i + get_base1(exdat_ndat,exdat_i,"exdat_ndat",1))));
                current_statement_begin__ = 520;
                while (as_bool(logical_lt(aggr_i,max_aggr_i))) {
                    {
                    current_statement_begin__ = 522;
                    local_scalar_t__ phivp;
                    (void) phivp;  // dummy to suppress unused var warning

                    stan::math::initialize(phivp, DUMMY_VAR__);
                    stan::math::fill(phivp,DUMMY_VAR__);
                    current_statement_begin__ = 523;
                    local_scalar_t__ phivn;
                    (void) phivn;  // dummy to suppress unused var warning

                    stan::math::initialize(phivn, DUMMY_VAR__);
                    stan::math::fill(phivn,DUMMY_VAR__);
                    current_statement_begin__ = 524;
                    int i_expose_tIDX(0);
                    (void) i_expose_tIDX;  // dummy to suppress unused var warning

                    stan::math::fill(i_expose_tIDX, std::numeric_limits<int>::min());
                    current_statement_begin__ = 525;
                    int i_expose_DUR(0);
                    (void) i_expose_DUR;  // dummy to suppress unused var warning

                    stan::math::fill(i_expose_DUR, std::numeric_limits<int>::min());


                    current_statement_begin__ = 527;
                    stan::math::assign(aggr_i, stan::model::deep_copy((aggr_i + 1)));
                    current_statement_begin__ = 530;
                    if (as_bool(get_base1(aggr_hivpos,aggr_i,"aggr_hivpos",1))) {
                        current_statement_begin__ = 531;
                        stan::math::assign(phivn, 0);
                    } else {

                        current_statement_begin__ = 533;
                        stan::math::assign(phivn, phivn_exit);
                        current_statement_begin__ = 534;
                        if (as_bool(get_base1(aggr_death,aggr_i,"aggr_death",1))) {
                            current_statement_begin__ = 535;
                            stan::math::assign(phivn, stan::model::deep_copy((phivn * get_base1(natmx_time_age,eidx,(eidx - cidx),"natmx_time_age",1))));
                        }
                    }
                    current_statement_begin__ = 539;
                    stan::math::assign(i_expose_tIDX, get_base1(aggr_exposestart_tIDX,aggr_i,"aggr_exposestart_tIDX",1));
                    current_statement_begin__ = 540;
                    stan::math::assign(i_expose_DUR, ((get_base1(aggr_exposeend_tIDX,aggr_i,"aggr_exposeend_tIDX",1) - i_expose_tIDX) + 1));
                    current_statement_begin__ = 541;
                    if (as_bool(logical_gt(i_expose_DUR,0))) {
                        {
                        current_statement_begin__ = 543;
                        validate_non_negative_index("integrand", "i_expose_DUR", i_expose_DUR);
                        Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  integrand(static_cast<Eigen::VectorXd::Index>(i_expose_DUR));
                        (void) integrand;  // dummy to suppress unused var warning

                        stan::math::initialize(integrand, DUMMY_VAR__);
                        stan::math::fill(integrand,DUMMY_VAR__);


                        current_statement_begin__ = 545;
                        stan::math::assign(integrand, elt_multiply(segment(incdens_coh,i_expose_tIDX,i_expose_DUR),segment(phivsurv_coh,i_expose_tIDX,i_expose_DUR)));
                        current_statement_begin__ = 547;
                        if (as_bool(get_base1(aggr_death,aggr_i,"aggr_death",1))) {
                            {
                            current_statement_begin__ = 548;
                            validate_non_negative_index("hivmx", "i_expose_DUR", i_expose_DUR);
                            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  hivmx(static_cast<Eigen::VectorXd::Index>(i_expose_DUR));
                            (void) hivmx;  // dummy to suppress unused var warning

                            stan::math::initialize(hivmx, DUMMY_VAR__);
                            stan::math::fill(hivmx,DUMMY_VAR__);


                            current_statement_begin__ = 549;
                            for (int t0idx = i_expose_tIDX; t0idx <= get_base1(aggr_exposeend_tIDX,aggr_i,"aggr_exposeend_tIDX",1); ++t0idx) {
                                current_statement_begin__ = 550;
                                stan::model::assign(hivmx, 
                                            stan::model::cons_list(stan::model::index_uni(((t0idx - i_expose_tIDX) + 1)), stan::model::nil_index_list()), 
                                            get_base1(hivmx_dur_a0,(eidx - t0idx),(t0idx - cidx),"hivmx_dur_a0",1), 
                                            "assigning variable hivmx");
                            }
                            current_statement_begin__ = 551;
                            if (as_bool(logical_gt(eidx,artstart_tIDX))) {
                                current_statement_begin__ = 552;
                                stan::math::assign(hivmx, stan::model::deep_copy(multiply(hivmx,get_base1(artrr,eidx,"artrr",1))));
                            }
                            current_statement_begin__ = 554;
                            stan::math::assign(integrand, stan::model::deep_copy(elt_multiply(integrand,add(hivmx,get_base1(natmx_time_age,eidx,(eidx - cidx),"natmx_time_age",1)))));
                            }
                        }
                        current_statement_begin__ = 557;
                        stan::math::assign(phivp, ((dt * sum(integrand)) * get_base1(natsurv_time_age,eidx,(eidx - cidx),"natsurv_time_age",1)));
                        }
                    } else {
                        current_statement_begin__ = 560;
                        stan::math::assign(phivp, 0.0);
                    }
                    current_statement_begin__ = 562;
                    if (as_bool(get_base1(aggr_deathinterv,aggr_i,"aggr_deathinterv",1))) {
                        {
                        current_statement_begin__ = 570;
                        int dur_i(0);
                        (void) dur_i;  // dummy to suppress unused var warning

                        stan::math::fill(dur_i, std::numeric_limits<int>::min());
                        current_statement_begin__ = 571;
                        local_scalar_t__ phivn_d;
                        (void) phivn_d;  // dummy to suppress unused var warning

                        stan::math::initialize(phivn_d, DUMMY_VAR__);
                        stan::math::fill(phivn_d,DUMMY_VAR__);
                        current_statement_begin__ = 572;
                        local_scalar_t__ phivp_d;
                        (void) phivp_d;  // dummy to suppress unused var warning

                        stan::math::initialize(phivp_d, DUMMY_VAR__);
                        stan::math::fill(phivp_d,DUMMY_VAR__);


                        current_statement_begin__ = 574;
                        stan::math::assign(dur_i, get_base1(aggr_deathinterv_DUR,aggr_i,"aggr_deathinterv_DUR",1));
                        current_statement_begin__ = 575;
                        stan::math::assign(phivn_d, calc_phivn((eidx + dur_i),((eidx + dur_i) - cidx),0,get_base1(aggr_hivpos,aggr_i,"aggr_hivpos",1),cumavoid_time_age,natsurv_time_age,natmx_time_age, pstream__));
                        current_statement_begin__ = 581;
                        if (as_bool(logical_negation(get_base1(aggr_hivpos,aggr_i,"aggr_hivpos",1)))) {
                            current_statement_begin__ = 582;
                            stan::math::assign(i_expose_DUR, stan::model::deep_copy((i_expose_DUR + dur_i)));
                        }
                        current_statement_begin__ = 584;
                        stan::math::assign(phivp_d, calc_phivp((eidx + dur_i),((eidx + dur_i) - cidx),i_expose_tIDX,(i_expose_tIDX - cidx),i_expose_DUR,0,cumavoidMID_time_age,incrateMID_time_age,hivsurv_dur_a0,hivmx_dur_a0,hivmxMID_dur_a0,artrr,artrr_MID,artstart_tIDX,natsurv_time_age,natmx_time_age,dt, pstream__));
                        current_statement_begin__ = 591;
                        stan::math::assign(phivn, stan::model::deep_copy((phivn - phivn_d)));
                        current_statement_begin__ = 592;
                        stan::math::assign(phivp, stan::model::deep_copy((phivp - phivp_d)));
                        }
                    }
                    current_statement_begin__ = 595;
                    stan::model::assign(ll_one, 
                                stan::model::cons_list(stan::model::index_uni(aggr_i), stan::model::nil_index_list()), 
                                stan::math::log((phivn + phivp)), 
                                "assigning variable ll_one");
                    }
                }
                }
            }
            }
        }
        current_statement_begin__ = 600;
        return stan::math::promote_scalar<fun_return_scalar_t__>(dot_product(ll_one,aggr_nrepl));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calc_ll_cohexit_functor__ {
    template <typename T14__, typename T15__, typename T16__, typename T17__, typename T18__, typename T19__, typename T20__, typename T21__, typename T22__, typename T24__, typename T25__, typename T26__>
        typename boost::math::tools::promote_args<T14__, T15__, T16__, T17__, typename boost::math::tools::promote_args<T18__, T19__, T20__, T21__, typename boost::math::tools::promote_args<T22__, T24__, T25__, T26__>::type>::type>::type
    operator()(const std::vector<int>& coh_cIDX,
                    const std::vector<int>& coh_minexpose_tIDX,
                    const std::vector<int>& coh_maxexpose_tIDX,
                    const std::vector<int>& coh_nexit,
                    const std::vector<int>& exdat_tIDX,
                    const std::vector<int>& exdat_minexpose_tIDX,
                    const std::vector<int>& exdat_maxexpose_tIDX,
                    const std::vector<int>& exdat_ndat,
                    const std::vector<int>& aggr_exposestart_tIDX,
                    const std::vector<int>& aggr_exposeend_tIDX,
                    const std::vector<int>& aggr_death,
                    const std::vector<int>& aggr_deathinterv,
                    const std::vector<int>& aggr_deathinterv_DUR,
                    const std::vector<int>& aggr_hivpos,
                    const Eigen::Matrix<T14__, Eigen::Dynamic,1>& aggr_nrepl,
                    const Eigen::Matrix<T15__, Eigen::Dynamic,Eigen::Dynamic>& cumavoid_time_age,
                    const Eigen::Matrix<T16__, Eigen::Dynamic,Eigen::Dynamic>& cumavoidMID_time_age,
                    const Eigen::Matrix<T17__, Eigen::Dynamic,Eigen::Dynamic>& incrateMID_time_age,
                    const Eigen::Matrix<T18__, Eigen::Dynamic,Eigen::Dynamic>& hivsurv_dur_a0,
                    const Eigen::Matrix<T19__, Eigen::Dynamic,Eigen::Dynamic>& hivmx_dur_a0,
                    const Eigen::Matrix<T20__, Eigen::Dynamic,Eigen::Dynamic>& hivmxMID_dur_a0,
                    const Eigen::Matrix<T21__, Eigen::Dynamic,1>& artrr,
                    const Eigen::Matrix<T22__, Eigen::Dynamic,1>& artrr_MID,
                    const int& artstart_tIDX,
                    const Eigen::Matrix<T24__, Eigen::Dynamic,Eigen::Dynamic>& natsurv_time_age,
                    const Eigen::Matrix<T25__, Eigen::Dynamic,Eigen::Dynamic>& natmx_time_age,
                    const T26__& dt, std::ostream* pstream__) const {
        return calc_ll_cohexit(coh_cIDX, coh_minexpose_tIDX, coh_maxexpose_tIDX, coh_nexit, exdat_tIDX, exdat_minexpose_tIDX, exdat_maxexpose_tIDX, exdat_ndat, aggr_exposestart_tIDX, aggr_exposeend_tIDX, aggr_death, aggr_deathinterv, aggr_deathinterv_DUR, aggr_hivpos, aggr_nrepl, cumavoid_time_age, cumavoidMID_time_age, incrateMID_time_age, hivsurv_dur_a0, hivmx_dur_a0, hivmxMID_dur_a0, artrr, artrr_MID, artstart_tIDX, natsurv_time_age, natmx_time_age, dt, pstream__);
    }
};

#include <meta_header.hpp>
 class model_functions : public prob_grad {
private:
public:
    model_functions(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_functions(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_functions_namespace::model_functions";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {

            // validate, data variables
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_functions() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body


        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_functions_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_functions";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_functions_namespace::model_functions stan_model;


#endif
